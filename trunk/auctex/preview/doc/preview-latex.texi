\input texinfo
@documentlanguage en
@setfilename preview-latex.info
@settitle preview-latex
@dircategory TeX
@direntry
* preview-latex: (preview-latex).       A preview mode for GNU Emacs
@end direntry
@dircategory Emacs
@direntry
* preview-latex: (preview-latex).       To preview LaTeX constructs
@end direntry
@c footnotestyle separate
@c paragraphindent 2
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex fn cp
@comment %**end of header 
@iftex
@tolerance 10000 @emergencystretch 3em
@end iftex
@macro AUCTeX {}
AUC@w{ }@TeX{}
@end macro
@ifnottex
@macro LaTeX {}
La@TeX{}
@end macro
@macro previewlatex {}
preview-latex
@end macro
@end ifnottex
@tex
\gdef\LaTeX{L\kern-.36em\raise.3ex\hbox{\sc{a}}\kern-.15em\TeX}
\gdef\previewlatex{Preview-\LaTeX}
@end tex

@finalout
@titlepage
@title @previewlatex{}
@subtitle A @LaTeX{} preview mode for @AUCTeX{} in Emacs.
@subtitle Version 0.7
  
@author by David Kastrup and Alan Shutko 
@author manual by Jan-@AA{}ke Larsson
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001, 2002, David Kastrup, Alan Shutko, and
Jan-@AA{}ke Larsson
 
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage
@page

@summarycontents
@c @contents

@ifnottex
@node top, Introduction, (dir), (dir)
@top preview-latex
 
@previewlatex{} is a package that allows extraction of certain
environments (most notably displayed formulas) for use in different
contexts. While the first application has been the embedding of those
preview fragments into Emacs source buffers under the @AUCTeX{} editing
environment, other applications are easily imaginable.

The name of the package is really @samp{preview-latex}, all in
lowercase letters, with a hyphen.  If you want to use it in a more
formal way, prettily typeset including the regular @LaTeX{} logo, it
can be written `Preview-@LaTeX{}', but this use is not recommended for
Email and other electronic communication, it is a `manual' form.

This file documents @previewlatex{} version 0.7

@cindex XEmacs
@strong{Please note:} XEmacs support is preliminary and not yet covered
in this manual.

This documentation should cover most important points. However,
corrections or perhaps rewrites of sections are @emph{very welcome}.

David Kastrup, Alan Shutko, Jan-@AA{}ke Larsson and Nick Alcock.

@end ifnottex

@menu
* Introduction::                Getting started.
* Installation::                Make Install.
* Keys and lisp::               Key bindings and user-level lisp functions.
* Customization::               Fitting it in.
* Known problems::              When things go wrong.
* Internals::                   Under the hood.
* License::                     GPL.
* Index::                       A menu of many topics.             
@end menu

@node Introduction, Installation, top, top
@c Used as @file{README} as well: in separate file
@chapter Introduction
@include readme.texi

@node Installation, Keys and lisp, Introduction, top
@c Used as @file{INSTALL} as well: in separate file
@chapter Installation 
@include install.texi

@node Keys and lisp, Customization, Installation, top
@chapter Key bindings and user-level lisp functions 

To the functions and key bindings in @AUCTeX{} (@inforef{Key
Index,,auctex}), the following are added:

@table @w
@item @kbd{C-c C-c g @key{RET}} 
Generate preview. This command generates previews for all appropriate
objects in the current document. Already preset previews are
re-generated.

You can use the @AUCTeX{} variants starting with @kbd{C-c C-b g
@key{RET}} and @kbd{C-c C-r g @key{RET}} for generating previews just in
the current buffer of the document, or a region of it.
@kindex @kbd{C-c C-c g @key{RET}}
@kindex @kbd{C-c C-b g @key{RET}}
@kindex @kbd{C-c C-r g @key{RET}}
@cindex Generate Preview

@item @kbd{C-c C-p C-p}
@itemx @code{preview-at-point}
On/off at point. If the cursor is positioned on or inside of a preview
area, this toggles its visibility, regenerating the preview if
necessary. If not, it will run the surroundings through preview. The
surroundings include all areas up to the next valid preview, unless
invalid previews occur before, in which case the area will include the
last such preview.
@kindex @kbd{C-c C-p C-p}
@findex preview-at-point
@cindex On/off at point

@item @kbd{C-c C-k}
Kill preview-generating process. This is really an @AUCTeX{} keybinding,
but it is included here as a hint. If you start generating a preview and
then make a change to the buffer, @previewlatex{} may be confused and
place the previews wrong.
@kindex @kbd{C-c C-k}
@cindex Kill preview-generating process

@item @kbd{C-c C-p C-s}
@itemx @code{preview-section} 
Run preview on this @LaTeX{} section.
@kindex @kbd{C-c C-p C-s}
@findex preview-section
@c @cindex Preview section 

@item @kbd{C-c C-p C-e}
@itemx @code{preview-environment (&optional count)}
Run preview on @LaTeX{} environment.  The environments in
@code{preview-inner-environments} are treated as inner levels so that
for instance, the @code{split} environment in
@code{\begin@{equation@}\begin@{split@}@dots{}\end@{split@}\end@{equation@}} is
properly displayed.  If called with an argument @code{count}, the
corresponding number of outward nested environments is treated as inner
levels.
@kindex @kbd{C-c C-p C-e}
@findex preview-environment
@c @cindex Preview environment

@item @kbd{C-c C-p C-r}
@itemx @code{preview-region (begin end)}
Run preview on current region. If called non-interactively, runs preview
on region between @code{begin} and @code{end}.
@kindex @kbd{C-c C-p C-r}
@findex preview-region
@c @cindex Preview region

@item @kbd{C-c C-p C-c C-b}
@itemx @code{preview-clearout-buffer (&optional buffer)}
Clear out all previews in current buffer. This makes the current buffer
lose all previews. If run non-interactively @code{buffer} is cleared out
from previews, current buffer if nil.
@kindex @kbd{C-c C-p C-c C-b}
@findex preview-clearout-buffer
@c @cindex Clearout previews

@item @kbd{C-c C-p C-c C-r}
@itemx @code{preview-clearout (&optional start end keep-dir)}
Clear out all previews in the current region. When called interactively,
the current region is used. Non-interactively, the region between
@code{start} and @code{end} is affected. Those two values default to the
borders of the entire buffer. If @code{keep-dir} is set to a value from
@code{TeX-active-tempdir}, previews associated with that directory are
kept.
@kindex @kbd{C-c C-p C-c C-r}
@findex preview-clearout
@end table

@node Customization, Known problems, Keys and lisp, top
@chapter Customization
@c @cindex Customization

Customization options can be found by typing @kbd{M-x customize-group
@key{RET} preview @key{RET}}. The list of suggestions can be made very
long (and is covered in detail in @ref{Internals}),
but some are:

@itemize @bullet
@item Adjust the smoothening of the previews
In the @code{Preview Gs} group, change @code{Preview Gs Options}: try
setting @option{-dGraphicsAlphaBits=2}, for instance.

@item Change the color of the preview background
If you use a non-white background in Emacs, you might have color
artifacts at the edges of your previews.  Playing around with the option
@code{Preview Transparent Color} in the @code{Preview Appearance} group
might improve things.  With some settings, the cursor may cover the
whole background of a preview, however.

Since this customization group is very specific to the display engine
in use, it may operate entirely differently under XEmacs.

@item Preview inline math
@cindex Inline math
In the @code{Preview Latex} group, check the box next to @code{textmath}
in @code{Preview Default Option List}.

@item The @code{showkeys} package
@cindex @code{showkeys}
When using @previewlatex{}, the @code{\label}s are hidden by the previews.
To show them in the previews (yes, this is possible) use the @LaTeX{}
package @code{showkeys}, by changing @code{Preview Default Preamble} in
the @code{Preview Latex} group to include @code{\usepackage@{showkeys@}}
before the @code{\RequirePackage[%P]@{preview@}} line (press the @key{Show}
and the first @key{INS} buttons).

@item Open previews automatically
If you want the previews to open automatically when the cursor enters
them, set @code{Preview Auto Reveal} to @code{On}, or alternatively
enable @code{reveal-mode}. The preview will close again when the cursor
leaves the preview unless you change it, in which case you will have to
regenerate the preview (via e.g., @kbd{C-c C-c C-p}).

@end itemize

@node Known problems, Internals, Customization, top
@chapter Known problems
@c also used as PROBLEMS file
@include problems.texi

@node Internals, License, Known problems, top
@chapter Internals/more customization

This package consists of two parts. A @LaTeX{} style that splits the
output into appropriate parts with one preview object on each page, and
an Emacs-lisp part integrating the thing into Emacs (aided by @AUCTeX{}).

@menu
* The LaTeX style file::        
* The Emacs interface::         
* On EPS previews::             
* Misplaced previews::          
@end menu

@node The LaTeX style file, The Emacs interface, Internals, Internals
@section The @LaTeX{} style file
@c Autogenerated from ../preview.dtx
@include preview-dtxdoc.texi

@node The Emacs interface, On EPS previews, The LaTeX style file, Internals
@section The Emacs interface

You can use @kbd{M-x customize-group @key{RET} preview-latex @key{RET}}
in order to customize these variables, or use the menus for it.  We
explain the various available options together with explaining how they
work together in making @previewlatex{} work as intended.

@vtable @code
@item preview-LaTeX-command
When you generate previews on a buffer or a region, the command in
@code{preview-LaTeX-command} gets run (that variable should only be
changed with Customize so that changes get propagated to @AUCTeX{}'s
command list).  As usual with @AUCTeX{}, you can continue working while
this is going on.  It is not a good idea to change the file until after
@previewlatex{} has established where to place the previews which it can
only do after the @LaTeX{} run completes.  This run produces a host of
pseudo-error messages that get parsed by @previewlatex{} at the end of
the @LaTeX{} run and give it the necessary information about where in
the source file the @LaTeX{} code for the various previews is located
exactly. The parsing takes a moment and will render Emacs busy.

@item preview-default-option-list
@itemx preview-default-preamble
This command passes options @option{auctex}, @option{active} and
@option{dvips} to the preview package so that the user need not supply
these by himself in case he wants to be able to still compile his
document without it turning into an incoherent mass of little
pictures. If the document does not call in the package itself (via
@code{\usepackage}) in the preamble, the preview package is loaded using
default options from @code{preview-default-option-list} and additional
commands specified in @code{preview-default-preamble}.

@item preview-fast-conversion
This defaults to `On' and results into the whole document being
processed as one large PostScript file from which the single images are
extracted with the help of parsing the PostScript for use of so-called
@acronym{DSC} comments.  The bounding boxes are extracted with the help
of @TeX{} instead of getting them from Dvips.  There are a few things
that could go wrong with this approach.  If you suspect you are
experiencing them, try setting this option to `Off'.

@item preview-prefer-TeX-bb
If this option is `On', it tells @previewlatex{} never to try to extract
bounding boxes from the bounding box comments of @acronym{EPS} files,
but rather rely on the boxes it gets from @TeX{}.  If you activated
@code{preview-fast-conversion}, this is done, anyhow.  The option
defaults to `Off'.

@item preview-fast-dvips-command
@itemx preview-dvips-command
The regular command for turning a @acronym{DVI} file into a single
PostScript file is @code{preview-fast-dvips-command}, while
@code{preview-dvips-command} is used for cranking out a @acronym{DVI}
file where every preview is in a separate @acronym{EPS} file.  Which of
the two commands gets used depends on the setting of
@code{preview-fast-conversion}.  The printer specified here by default
is @option{-Pwww} by default, which will usually get you scalable fonts
where available. If you are experiencing problems, you might want to try
playing around with Dvips options (@inforef{Command-line options,,dvips}).

The conversion of the previews into PostScript or @acronym{EPS} files
gets started immediately after the @LaTeX{} run completes and before
Emacs starts the parsing of the error messages.  When Emacs has finished
parsing the error messages, it activates all detected previews.  This
entails throwing away any previous previews covering the same areas, and
then replacing the text in its visual appearance by a placeholder
looking like a question mark.

@item preview-inner-environments
This is a list of environments that are regarded as inner levels of an
outer environment when doing @code{preview-environment}. One example
when this is needed is in
@code{\begin@{equation@}\begin@{split@}@dots{}\end@{split@}\end@{equation@}}, and
accordingly @code{split} is one entry in
@code{preview-inner-environments}.
@end vtable

@node On EPS previews, Misplaced previews, The Emacs interface, Internals
@section On @acronym{EPS} previews

@vtable @code
@item preview-image-type
@itemx preview-image-creators
What happens when Dvips is finished depends on the configuration of
@code{preview-image-type}.  What to do for each of the various settings,
what options to pass into GhostScript, and what Emacs image type to use
is specified in @code{preview-image-creators}.  If
@code{preview-image-type} is set to @code{'postscript}, @previewlatex{}
will simply tell Emacs about where it can find the @acronym{EPS} files
for each image and will then be finished.  Emacs then runs GhostScript
whenever it finds it needs to have one image displayed.  It turns out
that this mode of operation is of interest only for historic reasons
since it is painfully slow, blocks interactive work and leads to
defective images.  For this reason, @code{preview-image-type} defaults
to @code{'png}.  For this to work, your version of GhostScript needs to
support the @option{png16m} device.  If you are experiencing problems
here, you might want to reconfigure @code{preview-image-creators} or
@code{preview-image-type}.

Most devices make @previewlatex{} start up a single GhostScript process
for the entire preview run (as opposed to one per image) and feed it
either sections of a single PostScript file or separate @acronym{EPS}
files in sequence for conversion into @acronym{PNG} format which can be
displayed much faster by Emacs. Actually, not in sequence but backwards
since you are most likely editing at the end of the document. And as an
added convenience, any preview that happens to be on-screen is given
higher priority so that @previewlatex{} will first cater for the images
that are displayed. There are various options customizable concerning
aspects of that operation, see the customization group @code{Preview Gs}
for this.

@item preview-gs-options
Most interesting to the user perhaps is the setting of this variable.
It contains the default settings @option{-dTextAlphaBits=4} and
@option{-dGraphicsAlphaBits=4}.  Decreasing those values to 2 or@w{ }1
might increase GhostScript's performance if you find it lacking.
@end vtable

Running and feeding GhostScript from @previewlatex{} happens
asynchronously again: you can resume editing while the images arrive.
While those pretty pictures filling in the blanks on screen tend to
make one marvel instead of work, rendering the non-displayed images
afterwards will not take away your attention and will eventually
guarantee that jumping around in the document will encounter only
prerendered images.

@node Misplaced previews,  , On EPS previews, Internals
@section Misplaced previews

As explained previously, Emacs uses pseudo-error messages generated by
the @samp{preview} package in order to pinpoint the exact source
location where a preview originated. This works in running text, but
fails when preview material happens to lie in macro arguments, like the
contents of @code{\emph}. Those macros first read in their entire
argument, munge it through, perhaps transform it somehow, process it and
perhaps then typeset something. When they finally typeset something,
where is the location where the stuff originated? @TeX{}, having read in
the entire argument before, does not know and actually there would be no
sane way of defining it.

For previews contained inside such a macro argument, the default
behaviour of @previewlatex{} is to use a position immediately after the
closing brace of the argument. All the previews get placed there, all at
a zero-width position, which means that Emacs displays it in an order
that @previewlatex{} cannot influence (currently in Emacs it is even
possible that the order changes between runs). And since the placement
of those previews is goofed up, you will not be able to regenerate them
by clicking on them. The default behaviour is thus somewhat undesirable.

The solution (like with other preview problems) is to tell the @LaTeX{}
@samp{preview} package how to tackle this problem (@pxref{The LaTeX
style file}).  Simply, you don't need @code{\emph} do anything at all
during previews! You only want the text math previewed, so the solution
is to use @code{\PreviewMacro*\emph} in the preamble of your document
which will make @LaTeX{} ignore @code{\emph} completely as long as it is
not part of a larger preview (in which case it gets typeset as
usual). Its argument thus becomes ordinary text and gets treated like
ordinary text.

Note that it would be a bad idea to declare
@code{\PreviewMacro*[@{@{@}@}]\emph} since then both @code{\emph} as
well as its argument would be ignored instead of previewed. For
user-level macros, this is almost never wanted, but there may be
internal macros where you might want to ignore internal arguments.

The same mechanism can be used for a number of other text-formatting
commands like @code{\textrm}, @code{\textit} and the like. While they
all use the same internal macro @code{\text@@command}, it will not do to
redefine just that, since they call it only after having read their
argument in, and then it already is too late. So you need to disable
every of those commands by hand in your document preamble.

Actually, we wrote all of the above just to scare you.  At least all of
the above mentioned macros and a few more are already catered for by a
configuration file @file{prauctex.cfg} that gets loaded by default
unless the @samp{preview} package gets loaded with the @option{noconfig}
option.  You can make your own copy of this file in a local directory
and edit it in case of need.  You can also add loading of a file of your
liking to @code{preview-default-preamble}, or alternatively do the
manual disabling of your favorite macro in
@code{preview-default-preamble}, which is customizable in the Preview
Latex group.

@node License, Index, Internals, top
@c Not to be changed often, I think: in separate file.
@appendix License
@include copying.texi

@c @node Credits, Index, Internals, top
@c @appendix Credits 

@node Index,  , License, top
@unnumbered Index

@printindex cp

@bye
