\input texinfo
@setfilename preview-latex
@settitle Preview-LaTeX
@direntry
* Preview: (preview-latex).      A LaTeX preview mode primarily for AUC TeX in GNU Emacs.
@end direntry
@c footnotestyle separate
@c paragraphindent 2
@comment %**end of header 
@iftex
@tolerance 10000
@end iftex

@c Date: Nov 28 2001

@finalout
@titlepage
@title Preview La@TeX{}
@subtitle A La@TeX{} preview mode primarily for AUC @TeX{} in GNU Emacs.
@subtitle Version 0.5.8.2
  
@author by David Kastrup and Alan Shutko 
@author manual by Jan-Åke Larsson
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001, David Kastrup, Alan Shutko, and Jan-Åke
Larsson
 
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage
@page

@summarycontents
@c @contents

@ifinfo
@node top, Copying, (dir), (dir)
@top Preview La@TeX{}
 
Preview La@TeX{} is a package that allows extraction of certain
environments (most notably displayed formulas) for use in different
contexts. While the first application has been the embedding of those
preview fragments into Emacs source buffers under the AUC @TeX{} editing
environment, other applications are easily imaginable.

This file documents Preview La@TeX{} version 0.5.8.2.

If you want to use Preview La@TeX{} in AUC @TeX{} right away, be sure
to have a working AUC @TeX{} installation, install Preview La@TeX{}
and insert the following in your @file{.emacs} file.  This will make
Emacs load preview.el into AUC @TeX{} when you first load a La@TeX{}
file.

@lisp
(autoload 'LaTeX-preview-setup "preview")
(add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
@end lisp

NOTE: This documentation is preliminary.  It should however cover most
important points.  Corrections or perhaps rewrites of sections
are VERY WELCOME.

David Kastrup, Alan Shutko, and Jan-Åke Larsson

@end ifinfo

@menu
* Copying::                     Your rights.
* Introduction::                What is it good for?
* Installation::                Installation.
* Getting started::             Simple and fast.
* Basic Usage::                 Keys, customization.
* Internals::                   Under the hood.
* Credits::                     Contributors.
* Key Index::                   
* Function Index::              
* Variable Index::              
* Concept Index::               A menu covering many topics.
@end menu

@node Copying, Introduction, top, top
@c Not to be changed often, I think: in separate file.
@unnumbered Copying
@include copying.texi

@node Introduction, Installation, Copying, top
@chapter Introduction 
@c Used as @file{README} as well: in separate file
@include readme.texi

@node Installation, Getting started, Introduction, top
@chapter Installation 
@c Used as @file{INSTALL} as well: in separate file
@include install.texi

@node Getting started, Basic Usage, Installation, top
@chapter Getting started

The simplest way to use Preview La@TeX{} is to insert the following in
your @file{.emacs} file:

@lisp
(autoload 'LaTeX-preview-setup "preview")
(add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
@end lisp

Now, load a La@TeX{} document, and press @kbd{C-c C-c g RET} (for
``Generate Preview'') or press @kbd{C-c C-p C-p} (for ``De/Preview
This''). Previews will now be generated for various objects in your
document. You'll see them change into a large question-mark when the
process is half finished. Note that you can freely edit the buffer while
this is going on. When the process is finished you will see the objects
typeset in your buffer.

To see/edit the La@TeX{} code for a specific object, put the point (the
cursor) on it and press @kbd{C-c C-p C-p}. Now you can
edit the code, and generate a new preview by again pressing
@kbd{C-c C-p C-p}.

@node Basic Usage, Internals, Getting started, top
@chapter Basic Usage

Once you've got things working, you'll want this brief description of
what is available and how to customize it. Dig in!

@menu
* Key bindings::                
* Customization::               
@end menu

@node Key bindings, Customization, Basic Usage, Basic Usage
@section Key bindings

All the key bindings in AUC @TeX{} are present, of course. To these, the
following are added:

@table @kbd
@item C-c C-p C-p	
@kindex C-c C-p C-p
@findex @code{preview-dwim}
@cindex De/Preview ``this''
De/Preview ``this''. If the cursor is positioned on or inside of a
preview area, this toggles its visibility, regenerating the preview if
necessary. If not, it will run the surroundings through preview. The
surroundings include all areas up to the next valid preview, unless
invalid previews occur before, in which case the area will include the
last such preview.

@item C-c C-p C-s
@kindex C-c C-p C-s
@cindex Preview section 
Run preview on this LaTeX section.

@item C-c C-p C-e
@kindex C-c C-p C-e
@findex @code{preview-environment}
@cindex Preview environment
Run preview on this LaTeX environment.

@item C-c C-p C-r	
@kindex C-c C-p C-r
@findex @code{preview-region}
@cindex Preview region
Run preview on current region.

@item C-c C-p C-c
@kindex C-c C-p C-c
@cindex Prefix Command
Key in this to type a preview-latex command. (Currently available
commands are ...)

@item C-c C-p C-c C-b			
@kindex C-c C-p C-c C-b
@findex @code{preview-clearout-buffer}
@cindex Clearout previews
Clear out all previews in current buffer.

@item C-c C-p C-c C-r			
@kindex C-c C-p C-c C-r
@findex @code{preview-clearout}
Clear out all previews in the current region.
@end table

@node Customization,  , Key bindings, Basic Usage
@section Customization
@cindex Customization

Customization options can be found by typing @kbd{M-x customize-group
RET preview RET}. The list can be made very long, but some suggestions
are:

@itemize
@item Adjust the smoothening of the previews

In the @code{Preview Gs} group, change @code{Preview Gs Options}: try
setting @code{-dGraphicsAlphaBits=2}, for instance.

@item Change the color of the preview background

If you use a non-white background in emacs, it is possible to make the
previews have the same background color. In the @code{Preview
Appearance} group, set @code{Preview Transparent Color} to
@code{Autodetect}. This will also make the point (the cursor) cover the
whole background of a preview, but you'll have to live with that.

@item Preview inline math

In the @code{Preview Latex} group, check the box next to @code{textmath}
in @code{Preview Default Option List}.  Beware if you use
@code{x-symbol}, there is a known issue with that package.

@item The @code{showkeys} package

When using preview-latex, the \labels are hidden by the previews. To
show them in the previews (yes, this is possible) use the La@TeX{}
package @code{showkeys}, by changing @code{Preview Latex Command} to include
@code{\usepackage@{showkeys@}} in between 
@code{\AtBeginDocument@{} and @code{\ifx\ifPreview\undefined}

@end itemize
 
@node Internals, Credits, Basic Usage, top
@chapter Internals/more customization

This package consists of two parts. A La@TeX{} style that splits the
output into appropriate parts with one preview object on each page, and
an emacs-lisp part integrating the thing into emacs (aided by AUC
@TeX{}).

@menu
* The LaTeX style file::        
* The emacs interface::         
@end menu

@node The LaTeX style file, The emacs interface, Internals, Internals
@section The La@TeX{} style file

(To be written, or at least copied from preview.dtx)

@node The emacs interface,  , The LaTeX style file, Internals
@section The emacs interface

When you generate previews on a buffer or a region, the command in
@code{preview-LaTeX-command} gets run (that variable should only be
changed with @code{M-x customize RET} so that changes get propagated to
AUC @TeX{}'s command list).

This command passes options @code{auctex} and @code{active} to the
preview package so that the user need not supply these by himself in
case he wants to be able to still compile his document without it
turning into an incoherent mass of little pictures. It also tells LaTeX
to load the preview package with the options configured in
@code{preview-default-option-list} if the document does not call in the
package itself (via @code{\usepackage}) in the preamble.

This run produces a dvi file where every preview is on a separate page.
As usual with AUC @TeX{}, you can continue editing while this is going
on. It produces a host of pseudo-error messages that get parsed by
preview-latex at the end of the La@TeX{} run and give it the necessary
information about where in the source file the La@TeX{} code for the
various previews is located exactly. The parsing takes a moment and will
render Emacs busy. Before Emacs starts the parsing of the error
messages, it starts conversion of the previews into PostScript EPS
files, by calling the configurable @code{preview-dvips-command}. The
printer specified in there is @code{-Pwww} by default, which will
usually get you scalable fonts where available. If you are experiencing
problems, you might want to try playing around with dvips options
(hyperlink to dvips info file?).

When Emacs has finished parsing the error messages, it activates all
detected previews.  This entails throwing away any previous previews
covering the same areas, and then replacing the text in its visual
appearance by a placeholder looking like a question mark.

What happens when dvips is finished depends on the configuration of
@code{preview-image-type}. If this is set to @code{'postscript},
preview-latex will simply tell Emacs about where it can find the EPS
files for each image and will then be finished. Emacs runs GhostScript
whenever it finds it needs to have one image displayed. It turns out
that at the time of writing, the implementation in Emacs causes this to
make editing painfully slow and non-responsive. This is because Emacs
starts one GhostScript process per image. For this reason,
@code{preview-image-type} defaults to @code{'png}. This makes
preview-latex start up a single GhostScript process on its own and feeds
it the various EPS files in sequence for conversion into PNG format
which can be displayed much faster by Emacs. Actually, not in sequence
but backwards since you are most likely editing at the end of the
document. And as an added convenience, any preview that happens to be
on-screen is given higher priority so that preview-latex will first
cater for the images that are displayed. There are various options
customizable concerning aspects of that operation, see the customization
group @code{preview-gs} for this.

Running and feeding GhostScript from preview-latex happens
asynchronously again: you can resume editing while the images arrive.
While those pretty pictures filling in the blanks on screen tend to
make one marvel instead of work, rendering the non-displayed images
afterwards will not take away your attention and will eventually
guarantee that jumping around in the document will encounter only
prerendered images.

@section On EPS previews

@vindex @code{preview-image-type}
@vindex @code{preview-image-creators}
As mentioned above, preview-latex's default mechanism calls GhostScript
itself for first rendering all preview images into png format, then the
rendered images get used instead of making use of Emacs' builtin EPS
support. For this to work, your version of GhostScript needs to support
the png256 device. Other options are available by customizing
@code{preview-image-type}. The appropriate type must be supported in the
@code{preview-image-creators} variable which you can customize as well,
so adding a suitable device or changing an existing one in a way to
better suit the version of GhostScript you happen to be using should be
possible if you take the existing settings as example. Please send
information about such devices to the addresses mentioned in the README
file so that we can improve preview-latex.

IF you want to use Emacs' embedded EPS rendering support (which is NOT
the default), you almost certainly want to put @code{(setq gs-device
"x11alpha")} into your @file{.emacs} file. This will turn on
anti-aliasing.

If you are using GS 6.63 or later, you may get better output using the
following.
@vindex @code{gs-device}
@vindex @code{gs-options}

@lisp
(require 'gs)
(setq gs-device "x11")
(setq gs-options 
      (append 
       '("-dTextAlphaBits=4" 
         "-dGraphicsAlphaBits=2" 
         "-dMaxBitmap=10000000") 
       gs-options))
@end lisp

@node Credits, Key Index, Internals, top
@appendix Credits 

@node Key Index, Function Index, Credits, top
@unnumbered Key Index

@printindex ky

@node Function Index, Variable Index, Key Index, top
@unnumbered Function Index

@printindex fn

@node Variable Index, Concept Index, Function Index, top
@unnumbered Variable Index

@printindex vr

@node Concept Index,  , Variable Index, top
@unnumbered Concept Index

@printindex cp
@bye


