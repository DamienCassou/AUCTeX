\input texinfo
@documentlanguage en
@setfilename preview-latex.info
@settitle preview-latex
@dircategory TeX
@direntry
* preview-latex: (preview-latex).       A preview mode for GNU Emacs
@end direntry
@dircategory Emacs
@direntry
* preview-latex: (preview-latex).       To preview LaTeX constructs
@end direntry
@c footnotestyle separate
@c paragraphindent 2
@comment %**end of header 
@iftex
@tolerance 10000 @emergencystretch 3em
@end iftex
@macro AUCTeX {}
AUC@w{ }@TeX{}
@end macro
@ifnottex
@macro LaTeX {}
La@TeX{}
@end macro
@macro previewlatex {}
preview-latex
@end macro
@end ifnottex
@tex
\gdef\LaTeX{L\kern-.36em\raise.3ex\hbox{\sc{a}}\kern-.15em\TeX}
\gdef\previewlatex{Preview-\LaTeX}
@end tex

@finalout
@titlepage
@title @previewlatex{}
@subtitle A @LaTeX{} preview mode for @AUCTeX{} in Emacs.
@subtitle Version 0.6.1
  
@author by David Kastrup and Alan Shutko 
@author manual by Jan-@AA{}ke Larsson
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001, 2002, David Kastrup, Alan Shutko, and
Jan-@AA{}ke Larsson
 
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage
@page

@summarycontents
@c @contents

@ifnottex
@node top, Introduction, (dir), (dir)
@top preview-latex
 
@previewlatex{} is a package that allows extraction of certain
environments (most notably displayed formulas) for use in different
contexts. While the first application has been the embedding of those
preview fragments into Emacs source buffers under the @AUCTeX{} editing
environment, other applications are easily imaginable.

The name of the package is really @samp{preview-latex}, all in
lowercase letters, with a hyphen.  If you want to use it in a more
formal way, prettily typeset including the regular @LaTeX{} logo, it
can be written `Preview-@LaTeX{}', but this use is not recommended for
Email and other electronic communication, it is a `manual' form.

This file documents @previewlatex{} version 0.6.1

@c If you want to use @previewlatex{} in @AUCTeX{} right away, be sure to
@c have a working @AUCTeX{} installation, install @previewlatex{} and insert
@c the following in your @file{.emacs} file.  This will make Emacs load
@c @file{preview.el} into @AUCTeX{} when you first load a @LaTeX{} file.
@c 
@c @lisp
@c (autoload 'LaTeX-preview-setup "preview")
@c (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
@c @end lisp

@cindex XEmacs
@strong{Please note:} Currently XEmacs support is not yet operative.

This documentation is preliminary. It should however cover most
important points. Corrections or perhaps rewrites of sections are
@emph{very welcome}.

David Kastrup, Alan Shutko, and Jan-@AA{}ke Larsson

@end ifnottex

@menu
* Introduction::                What is it good for?
* Getting started::             Simple and fast.
* Installation::                Make Install.
* Keys and lisp::               Key bindings and user-level lisp functions.
* Customization::               Fitting it in.
* Known problems::              When things go wrong.
* Internals::                   Under the hood.
* License::                     GPL.
* Index::                       A menu of many topics.             
@end menu

@node Introduction, Getting started, top, top
@c Used as @file{README} as well: in separate file
@chapter Introduction
@include readme.texi

@node Getting started, Installation, Introduction, top
@chapter Getting started

If someone already has installed @previewlatex{} for you
(@pxref{Installation}), the simplest way to use @previewlatex{} is to
insert the following in your @file{.emacs} file:
@cindex @file{.emacs}

@lisp
(autoload 'LaTeX-preview-setup "preview")
(add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
@end lisp

Now, load a @LaTeX{} document, and press @kbd{C-c C-c g @key{RET}} (for
``Generate Preview'') or press @kbd{C-c C-p C-p} (for ``On/off at
point'').  You may also use the appropriate menu entries.  Previews will
now be generated for various objects in your document. You'll see them
change into a large question-mark when the process is half
finished. Note that you can freely navigate the buffer while this is
going on. When the process is finished you will see the objects typeset
in your buffer.

It is a bad idea, however, to edit the buffer before the question marks
appear, since that is the moment when the correlation between the
original text and the buffer locations gets established.  If the buffer
changes before that point of time, the previews will not be placed where
they belong. If you do want to change some obvious error you just
spotted we recommend you stop the background process by pressing
@kbd{C-c C-k}.

To see/edit the @LaTeX{} code for a specific object, put the point (the
cursor) on it and press @kbd{C-c C-p C-p}. Now you can edit the code,
and generate a new preview by again pressing @kbd{C-c C-p C-p}.

@node Installation, Keys and lisp, Getting started, top
@c Used as @file{INSTALL} as well: in separate file
@chapter Installation 
@include install.texi

@node Keys and lisp, Customization, Installation, top
@chapter Key bindings and user-level lisp functions 

To the functions and key bindings in @AUCTeX{} (@inforef{Key
Index,,auctex}), the following are added:

@table @w
@item @kbd{C-c C-c g @key{RET}} 
Generate preview. This command generates previews for all appropriate
objects in the current document. Already preset previews are
re-generated.

You can use the @AUCTeX{} variants starting with @kbd{C-c C-b g
@key{RET}} and @kbd{C-c C-r g @key{RET}} for generating previews just in
the current buffer of the document, or a region of it.
@cindex @kbd{C-c C-c g @key{RET}}
@cindex @kbd{C-c C-b g @key{RET}}
@cindex @kbd{C-c C-r g @key{RET}}
@cindex Generate Preview

@item @kbd{C-c C-p C-p}
@itemx @code{preview-at-point}
On/off at point. If the cursor is positioned on or inside of a preview
area, this toggles its visibility, regenerating the preview if
necessary. If not, it will run the surroundings through preview. The
surroundings include all areas up to the next valid preview, unless
invalid previews occur before, in which case the area will include the
last such preview.
@cindex @kbd{C-c C-p C-p}
@cindex @code{preview-at-point}
@cindex De/Preview at point

@item @kbd{C-c C-k}
Kill preview-generating process. This is really an @AUCTeX{} keybinding,
but it is included here as a hint. If you start generating a preview and
then make a change to the buffer, @previewlatex{} may be confused and
place the previews wrong.
@cindex @kbd{C-c C-k}
@cindex Kill preview-generating process

@item @kbd{C-c C-p C-s}
@itemx @code{preview-section} 
Run preview on this @LaTeX{} section.
@cindex @kbd{C-c C-p C-s}
@cindex @code{preview-section}
@cindex Preview section 

@item @kbd{C-c C-p C-e}
@itemx @code{preview-environment (&optional count)}
Run preview on @LaTeX{} environment.  The environments in
@code{preview-inner-environments} are treated as inner levels so that
for instance, the @code{split} environment in
@code{\begin@{equation@}\begin@{split@}@dots{}\end@{split@}\end@{equation@}} is
properly displayed.  If called with an argument @code{count}, the
corresponding number of outward nested environments is treated as inner
levels.
@cindex @kbd{C-c C-p C-e}
@cindex @code{preview-environment}
@cindex Preview environment

@item @kbd{C-c C-p C-r}
@itemx @code{preview-region (begin end)}
Run preview on current region. If called non-interactively, runs preview
on region between @code{begin} and @code{end}.
@cindex @kbd{C-c C-p C-r}
@cindex @code{preview-region}
@cindex Preview region

@item @kbd{C-c C-p C-c C-b}
@itemx @code{preview-clearout-buffer (&optional buffer)}
Clear out all previews in current buffer. This makes the current buffer
lose all previews. If run non-interactively @code{buffer} is cleared out
from previews, current buffer if nil.
@cindex @kbd{C-c C-p C-c C-b}
@cindex @code{preview-clearout-buffer}
@cindex Clearout previews

@item @kbd{C-c C-p C-c C-r}
@itemx @code{preview-clearout (&optional start end keep-dir)}
Clear out all previews in the current region. When called interactively,
the current region is used. Non-interactively, the region between
@code{start} and @code{end} is affected. Those two values default to the
borders of the entire buffer. If @code{keep-dir} is set to a value from
@code{TeX-active-tempdir}, previews associated with that directory are
kept.
@cindex @kbd{C-c C-p C-c C-r}
@cindex @code{preview-clearout}
@end table

@node Customization, Known problems, Keys and lisp, top
@chapter Customization
@cindex Customization

Customization options can be found by typing @kbd{M-x customize-group
@key{RET} preview @key{RET}}. The list of suggestions can be made very
long, but some are:

@itemize @bullet
@item Adjust the smoothening of the previews

@cindex Ghostscript options
In the @code{Preview Gs} group, change @code{Preview Gs Options}: try
setting @option{-dGraphicsAlphaBits=2}, for instance.

@item Change the color of the preview background

If you use a non-white background in Emacs, it is possible to make the
previews have the same background color. In the @code{Preview
Appearance} group, set @code{Preview Transparent Color} to
@code{Autodetect}. This will also make the point (the cursor) cover the
whole background of a preview, but you'll have to live with that.

@item Preview inline math

@cindex Inline math
In the @code{Preview Latex} group, check the box next to @code{textmath}
in @code{Preview Default Option List}.  Beware if you use
@code{x-symbol}, there is a known issue with that package if you are
using a version before 4.0h/beta.

@item The @code{showkeys} package

@cindex @code{showkeys}
When using @previewlatex{}, the @code{\label}s are hidden by the previews.
To show them in the previews (yes, this is possible) use the @LaTeX{}
package @code{showkeys}, by changing @code{Preview Default Preamble} in
the @code{Preview Latex} group to include @code{\usepackage@{showkeys@}}
before the @code{\RequirePackage[%P]@{preview@}} line (press the @key{Show}
and the first @key{INS} buttons).

@end itemize

@node Known problems, Internals, Customization, top
@chapter Known problems
@comment also used as PROBLEMS file
A number of issues are known concerning the interoperation with various
other software.

@menu
* Problems with GhostScript::   
* Font problems with Dvips::    
* Emacs problems::              
* AUC TeX prior to 11.0::    
* LaTeX international characters::  
* x-symbol interoperation::     
* Middle-clicks paste instead of toggling::  
@end menu
@include problems.texi

@node Internals, License, Known problems, top
@chapter Internals/more customization

This package consists of two parts. A @LaTeX{} style that splits the
output into appropriate parts with one preview object on each page, and
an Emacs-lisp part integrating the thing into Emacs (aided by @AUCTeX{}).

@menu
* The LaTeX style file::        
* The Emacs interface::         
* On EPS previews::             
* Misplaced previews::          
@end menu

@node The LaTeX style file, The Emacs interface, Internals, Internals
@section The @LaTeX{} style file

The main purpose of this package is the extraction of certain
environments (most notably displayed formulas) for use in different
contexts.  While the erstwhile application has been the embedding of
those preview fragments into Emacs source buffers under the @AUCTeX{}
editing environment, other applications are easily imaginable.

In particular it should be noted that producing @acronym{EPS} files with
Dvips and its derivatives using the @option{-E} option is not currently
well-supported by @LaTeX{}.  People make do by fiddling around with
@code{\thispagestyle@{empty@}} and hoping for the best (namely, that the
specified contents will indeed fit on single pages), and then trying to
guess the baseline of the resulting code and stuff, but this is at best
dissatisfactory.  The preview package provides an easy way to ensure
that exactly one page per request gets shipped, with a well-defined
baseline and no page decorations.  Thus you can safely use @code{dvips
-E -i} and get a single @acronym{EPS} file with shrink-wrapped bounding
box for every generated image of a @LaTeX{} run.  The possibility for
generating a whole set of graphics with a single run of @LaTeX{} and
Dvips increases both speed and robustness of applications.  It is to be
hoped that applications like @LaTeX{}2HTML will be able to make use of
this package in future.

The package is included with the customary

@example
\usepackage[@var{options}]@{preview@}
@end example

@noindent
You should usually load this package as the last one, since it redefines
several things that other packages may also provide. Note that if you
are using @AUCTeX{}, the package is loaded automatically, so you don't
need to do it yourself unless you have something advanced in mind.


@menu
* Package options::             
* Provided Commands::           
@end menu

@node Package options, Provided Commands, The LaTeX style file, The LaTeX style file
@subsection Package options
The following options are available:

@table @code
@item active
This is the most essential option.  If this option is not specified, the
@samp{preview} package will be inactive and the document will be typeset
as if the @samp{preview} package were not loaded, except that all
declarations and environments defined by the package are still legal but
have no effect.  This allows defining previewing characteristics in your
document, and only activating them by calling @LaTeX{} as 

@example
latex '\PassOptionsToPackage@{active@}@{preview@} 
\input @var{filename}'
@end example

@item noconfig 
Usually the file @file{prdefault.cfg} gets loaded whenever the
@samp{preview} package gets activated.  @file{prdefault.cfg} is supposed
to contain definitions that can cater for otherwise bad results, for
example, if a certain document class would otherwise lead to trouble.
In addition, there may be configuration files specific for certain
@samp{preview} options like @option{auctex} which have more immediate
needs.  The @option{noconfig} option suppresses loading of those option
files, too.  

@item psfixbb
Dvips determines the bounding boxes from the material in the
@acronym{DVI} file it understands.  Lots of PostScript specials are not
part of that.  Since the @TeX{} boxes do not make it into the
@acronym{DVI} file, but merely characters, rules and specials do, Dvips
might include far too small areas.  The option @option{psfixbb} will
include @file{/dev/null} as a graphic file in the ultimate upper left
and lower right corner of the previewed box.  This will make Dvips
generate an appropriate bounding box.

@item displaymath 
This option will make all displayed math environments subject to preview
processing, and will typically be the most desired option.  

@item floats
This will make all float objects subject to preview processing.  If you
want to be more selective about what floats to pass through to a
preview, you should instead use the @code{\PreviewSnarfEnvironment}
command on the floats you want to have previewed.  

@item textmath 
Will make all text math subject to previews.  Since math mode is used
throughly inside of @LaTeX{} even for other purposes, this works by
redefining @code{\(}, @code{\)} and @code{$}.  Only occurences of these
text math delimiters in later loaded packages and in the main document
will thus be affected.

@item graphics 
All @code{\includegraphics} commands will be subject to a preview.  

@item sections 
All section headers will be subject to a preview.  

@item delayed
This will delay all activations and redefinitions the @samp{preview}
package makes until @code{\begin@{document@}}.  The purpose of this is
to cater for documents which should be subjected to the @samp{preview}
package without having been prepared for it.  You can process such
documents with 

@example 
latex '\RequirePackage[active,delayed,@var{options}]@{preview@} 
\input @var{filename}'
@end example

@noindent
This relaxes the requirement to be loading the @samp{preview} package as
last package.  

@item @var{driver} 
This loads a special driver file @file{pr@var{driver}.def}.  Currently
the only supported driver is @option{auctex}.  This driver will produce
fake error messages at the start and end of every preview environment
that enable a special Emacs package in connection with @AUCTeX{} to
pinpoint the exact source location where the previews have originated.
Unfortunately, there is no other reliable means of passing the current
@TeX{} input position @emph{in} a line to external programs.  You should
not specify this option manually, since it will only be needed by
automated runs that want to parse the pseudo error messages.  Those runs
will then use @code{\PassOptionsToPackage} in order to effect the
desired behaviour.  In addition, @file{prauctex.cfg} will get loaded
unless inhibited by the @option{noconfig} option.  This caters for the
most frequently encountered problematic commmands.  
@end table

@node Provided Commands
@subsection Provided Commands

@table @code
@item \begin@{preview@}@dots{}\end@{preview@}
The @code{preview} environment causes its contents to be set as a single
preview image.  Insertions like figures and footnotes (except those
included in minipages) will typically lead to error messages or be lost.
In case the @samp{preview} package has not been activated, the contents of
this environment will be typeset normally.

@item \begin@{nopreview@}@dots{}\end@{nopreview@}
The @code{nopreview} environment will cause its contents not to undergo
any special treatment by the |preview| package.  When @samp{preview} is
@option{active}, the contents will be discarded like all main text that
does not trigger the @samp{preview} hooks.  When @samp{preview} is not
active, the contents will be typeset just like the main text.

Note that both of these environments typeset things when preview is
not active.  If you need something typeset conditionally, use the
@code{\ifPreview} conditional for it.

@item \PreviewMacro
@cindex @code{\PreviewMacro}
If you want to make a macro like @code{\includegraphics} (actually, this
is what is done by the @option{graphics} option to @samp{preview})
produce a preview image, you put a declaration like 

@example
\PreviewMacro[*[[!]@{\includegraphics@} 
@end example 

@noindent
or, more readable,

@example 
\PreviewMacro[@{*[][]@{@}@}]@{\includegraphics@} 
@end example

@noindent
into your preamble.  The optional argument to @code{\PreviewMacro}
specifies the arguments @code{\includegraphics} accepts, since this is
necessary information for properly ending the preview box.  Note that if
you are using the more readable form, you have to enclose the argument
in a @code{[@{} and @code{@}]} pair.  The inner braces are necessary to
stop any included @code{[]} pairs from prematurely ending the optional
argument, and to make a single @code{@{@}} denoting an optional argument
not get stripped away by @TeX{}'s argument parsing.

The letters simply mean
@table @code
@item * 
indicates an optional @code{*} modifier, as in @code{\includegraphics*}.

@item [ 
indicates an optional argument in brackets.  This syntax
is somewhat baroque, but brief.

@item []
also indicates an optional argument in brackets.  Be sure to have
encluded the entire optional argument specification in an additional
pair of braces as described above.

@item ! 
indicates a mandatory argument.
@item @{@}
indicates the same.  Again, be sure to have that additional level of
braces around the whole argument specification. 
@end table

@item \PreviewMacro*
A similar invocation @code{\PreviewMacro*} simply throws the macro and
all of its arguments declared in the manner above away.  This is mostly
useful for having things like @code{\footnote} not do their magic on
their arguments.  More often than not, you don't want to declare any
arguments to scan to @code{\PreviewMacro*} since you would want the
remaining arguments to be treated as usual text and typeset in that
manner instead of being thrown away.  An exception might be, say, sort
keys for @code{\cite}.

@item \PreviewEnvironment 
@cindex @code{\PreviewEnvironment}
The macro @code{\PreviewEnvironment} works just as @code{\PreviewMacro}
does, only for environments.  

@item \PreviewEnvironment*
And the same goes for @code{\PreviewEnvironment*} as compared to
@code{\PreviewMacro*}.

@item \PreviewSnarfEnvironment
This macro does not typeset the original environment inside of a
preview box, but instead typesets just the contents of the original
environment inside of the preview box, leaving nothing for the original
environment.  This has to be used for figures, for example, since they
would 

@enumerate
@item produce insertion material that cannot be extracted to the
preview properly,
@item complain with an error message about not being in outer par
mode.
@end enumerate

@item \ifPreview
In case you need to know whether @samp{preview} is @option{active}, you
can use the conditional @code{\ifPreview} together with @code{\else} and
@code{\fi}.

@end table

@node The Emacs interface, On EPS previews, The LaTeX style file, Internals
@section The Emacs interface

When you generate previews on a buffer or a region, the command in
@code{preview-LaTeX-command} gets run (that variable should only be
changed with @kbd{M-x customize @key{RET}} so that changes get
propagated to @AUCTeX{}'s command list).

@cindex @code{preview-default-option-list}
@cindex @code{preview-default-preamble}
This command passes options @option{auctex} and @option{active} to the
preview package so that the user need not supply these by himself in
case he wants to be able to still compile his document without it
turning into an incoherent mass of little pictures. If the document does
not call in the package itself (via @code{\usepackage}) in the preamble,
the preview package is loaded using default options from
@code{preview-default-option-list} and additional commands specified in
@code{preview-default-preamble}.

@cindex @code{preview-dvips-command}
This run produces a dvi file where every preview is on a separate page.
As usual with @AUCTeX{}, you can continue working while this is going
on.  It is not a good idea to change the file until after
@previewlatex{} has established where to place the previews which it can
only do after the @LaTeX{} run completes.  This run produces a host of
pseudo-error messages that get parsed by @previewlatex{} at the end of
the @LaTeX{} run and give it the necessary information about where in
the source file the @LaTeX{} code for the various previews is located
exactly. The parsing takes a moment and will render Emacs busy. Before
Emacs starts the parsing of the error messages, it starts conversion of
the previews into PostScript @acronym{EPS} files, by calling the
configurable @code{preview-dvips-command}. The printer specified in
there is @option{-Pwww} by default, which will usually get you scalable
fonts where available. If you are experiencing problems, you might want
to try playing around with Dvips options @inforef{Command-line
options,,dvips}.

When Emacs has finished parsing the error messages, it activates all
detected previews.  This entails throwing away any previous previews
covering the same areas, and then replacing the text in its visual
appearance by a placeholder looking like a question mark.

@cindex @code{preview-image-type}
What happens when Dvips is finished depends on the configuration of
@code{preview-image-type}. If this is set to @code{'postscript},
@previewlatex{} will simply tell Emacs about where it can find the
@acronym{EPS} files for each image and will then be finished. Emacs runs
GhostScript whenever it finds it needs to have one image displayed. It
turns out that at the time of writing, the implementation in Emacs
causes this to make editing painfully slow and non-responsive. This is
because Emacs starts one GhostScript process per image. For this reason,
@code{preview-image-type} defaults to @code{'png}. This makes
@previewlatex{} start up a single GhostScript process on its own and feeds
it the various @acronym{EPS} files in sequence for conversion into
@acronym{PNG} format which can be displayed much faster by
Emacs. Actually, not in sequence but backwards since you are most likely
editing at the end of the document. And as an added convenience, any
preview that happens to be on-screen is given higher priority so that
@previewlatex{} will first cater for the images that are displayed. There
are various options customizable concerning aspects of that operation,
see the customization group @code{Preview Gs} for this.

Running and feeding GhostScript from @previewlatex{} happens
asynchronously again: you can resume editing while the images arrive.
While those pretty pictures filling in the blanks on screen tend to
make one marvel instead of work, rendering the non-displayed images
afterwards will not take away your attention and will eventually
guarantee that jumping around in the document will encounter only
prerendered images.

@node On EPS previews, Misplaced previews, The Emacs interface, Internals
@section On @acronym{EPS} previews

@cindex @code{preview-image-type}
@cindex @code{preview-image-creators}
As mentioned above, @previewlatex{}'s default mechanism calls
GhostScript itself for first rendering all preview images into png
format, then the rendered images get used instead of making use of
Emacs' builtin @acronym{EPS} support. For this to work, your version of
GhostScript needs to support the @option{png16m} device. Other options
are available by customizing @code{preview-image-type}. The appropriate
type must be supported in the @code{preview-image-creators} variable
which you can customize as well, so adding a suitable device or changing
an existing one in a way to better suit the version of GhostScript you
happen to be using should be possible if you take the existing settings
as example. Please send information about such devices to the addresses
mentioned in the @file{README} file so that we can improve
@previewlatex{}.

IF you want to use Emacs' embedded @acronym{EPS} rendering support
(which is @emph{not} the default), you almost certainly want to put
@code{(setq gs-device "x11alpha")} into your @file{.emacs} file. This
will turn on anti-aliasing.

If you are using GhostScript 6.63 or later, you may get better output
using the following.
@cindex @code{gs-device}
@cindex @code{gs-options}

@lisp
(require 'gs)
(setq gs-device "x11")
(setq gs-options 
      (append 
       '("-dTextAlphaBits=4" 
         "-dGraphicsAlphaBits=2" 
         "-dMaxBitmap=10000000") 
       gs-options))
@end lisp

@node Misplaced previews,  , On EPS previews, Internals
@section Misplaced previews

As explained previously, Emacs uses pseudo-error messages generated by
the @samp{preview} package in order to pinpoint the exact source
location where a preview originated. This works in running text, but
fails when preview material happens to lie in macro arguments, like the
contents of @code{\emph}. Those macros first read in their entire
argument, munge it through, perhaps transform it somehow, process it and
perhaps then typeset something. When they finally typeset something,
where is the location where the stuff originated? @TeX{}, having read in
the entire argument before, does not know and actually there would be no
sane way of defining it.

For previews contained inside such a macro argument, the default
behaviour of @previewlatex{} is to use a position immediately after the
closing brace of the argument. All the previews get placed there, all at
a zero-width position, which means that Emacs displays it in an order
that @previewlatex{} cannot influence (currently in Emacs it is even
possible that the order changes between runs). And since the placement
of those previews is goofed up, you will not be able to regenerate them
by clicking on them. The default behaviour is thus somewhat undesirable.

The solution (like with other preview problems) is to tell the @LaTeX{}
@samp{preview} package how to tackle this problem (@pxref{The LaTeX
style file}).  Simply, you don't need @code{\emph} do anything at all
during previews! You only want the text math previewed, so the solution
is to use @code{\PreviewMacro*\emph} in the preamble of your document
which will make @LaTeX{} ignore @code{\emph} completely as long as it is
not part of a larger preview (in which case it gets typeset as
usual). Its argument thus becomes ordinary text and gets treated like
ordinary text.

Note that it would be a bad idea to declare
@code{\PreviewMacro*[@{@{@}@}]\emph} since then both @code{\emph} as
well as its argument would be ignored instead of previewed. For
user-level macros, this is almost never wanted, but there may be
internal macros where you might want to ignore internal arguments.

The same mechanism can be used for a number of other text-formatting
commands like @code{\textrm}, @code{\textit} and the like. While they
all use the same internal macro @code{\text@@command}, it will not do to
redefine just that, since they call it only after having read their
argument in, and then it already is too late. So you need to disable
every of those commands by hand in your document preamble.

Actually, we wrote all of the above just to scare you.  At least all of
the above mentioned macros and a few more are already catered for by a
configuration file @file{prauctex.cfg} that gets loaded by default
unless the @samp{preview} package get loaded with the @option{noconfig}
option.  You can make your own copy of this file in a local directory
and edit it in case of need.  You can also add loading of a file of your
liking to @code{preview-default-preamble}, or alternatively do the
manual disabling of your favorite macro in
@code{preview-default-preamble}, which is customizable in the Preview
Latex group.

@node License, Index, Internals, top
@c Not to be changed often, I think: in separate file.
@appendix License
@include copying.texi

@c @node Credits, Index, Internals, top
@c @appendix Credits 

@node Index,  , License, top
@unnumbered Index

@printindex cp
@bye


