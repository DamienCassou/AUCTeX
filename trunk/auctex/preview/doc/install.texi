@include macros.texi
@include auto.texi
@ifset rawfile
@node Top
@top Installing @previewlatex{}

@end ifset
@c -----------------------
@ifset embedded
This version of @previewlatex{} gets installed as part of @AUCTeX{}, so
we'll just mention the installation options that happen to be specific
to @previewlatex{}.
@end ifset
@ifclear embedded
Installing @previewlatex{} should be simple: merely
@command{./configure}, @command{make}, and @code{make install} for a
standard site-wide installation (most other installations can be done by
specifying a @option{--prefix=@dots{}} option).  This does not yet
activate the package, but merely makes it available.  See @ref{Loading
the package} for the activation.
@end ifclear
Note that unlike most emacs add-ins,
@previewlatex{} consists of a @TeX{} part and an Emacs part (that uses
@AUCTeX{}).  This makes configuration a bit trickier than normal.
Please read through this document fully before installing anything.

@ifset rawfile
@menu
* Prerequisites::               
* Configure::                   
* Build/install::               
* Loading the package::         
* Advice for package providers::  
* Advice for non-privileged users::
@end menu
@end ifset
@ifclear rawfile
@menu
* Prerequisites::               
* Configure::                   
* Build/install::               
* Loading the package::         
* Advice for package providers::  
* Advice for non-privileged users::
* Installation under MS Windows::
@end menu
@end ifclear

First of all: the installation of @previewlatex{} under @w{MS Windows}
is a bit special, so we are covering this separately in
@ifset rawfile
the file @file{INSTALL.windows}.
@end ifset
@ifclear rawfile
@xref{Installation under MS Windows}.
@end ifclear

@ifset rawfile
@node Prerequisites
@chapter Prerequisites
@raisesections
@end ifset
@ifclear rawfile
@node Prerequisites
@section Prerequisites
@end ifclear

@itemize @bullet
@item A recent version of Emacs, alternatively XEmacs

@w{Emacs 20} is no longer supported, and neither is XEmacs with a
version of @code{xemacs-base} older than 1.84 (released in sumo from
02/02/2004).  Using @previewlatex{} requires a version of Emacs compiled
with image support.  This means that @w{Emacs 21} will work only in the
version for X11: for Windows and MacOSX, you need to use @w{Emacs 22}
(which is not yet released) or a developer version.  Since the developer
version is quite stable by now and features four more years of
development and bugfixes, we recommend its use even for X11-based
platforms.  You can get it here:

@table @b
@item Windows
Precompiled versions are available from @uref{http://www.crasseux.com}
and @uref{http://nqmacs.sf.net}.
@item MacOSX
A precompiled version including an installer as well as preinstalled
versions of @AUCTeX{} and @previewlatex{} is available from
@uref{http://yaced.sf.net}.  A different port (without @AUCTeX{} and
@previewlatex{}) is
@uref{http://www.apple.com/downloads/macosx/unix_open_source/carbonemacspackage.html}.
Some changes and patches attempt to make Emacs behave more in line with
MacOSX.
@item Debian Linux
@uref{http://sadleder.de/debian/}
@item Fedora Linux
@uref{http://people.redhat.com/petersen/emacs/}
@item Self-compiled
Compiling Emacs yourself requires a C compiler and a number of tools and
development libraries.  Details are beyond the scope of this manual.
Instructions for checking out the source code can be found at
@uref{http://savannah.gnu.org/cvs/?group=emacs}.
@end table

Supporting XEmacs (version 21.4.15, 21.4.17 or later) in a satisfactory
manner has proven to be difficult, partly because of technical
shortcomings, partly because fixing problems exposed by @AUCTeX{} is not
important to XEmacs developers.
 
@ifclear embedded
@item A working @AUCTeX{} installation

@AUCTeX{} can be found at @uref{http://www.gnu.org/software/auctex}.
This site now provides up-to-date tarballs as well as RPMs.  At the time
of this writing, the latest version is 11.55.  You need at least 11.51
to support PDF@LaTeX{} operation.  Versions of 11.80 or later should
already come with @previewlatex{} included, unless you have a
precompiled package that explicitly disabled it.
@end ifclear

@item A working @LaTeX{} installation

Preview should work with nearly any @LaTeX{} installation which contains
Dvips, though most testing has taken place using te@TeX{}-based
distributions.

@item A recent Ghostscript

This is not really needed to @emph{install} the package, but will be
required for stable operation of it.  Most versions of Ghostscript
nowadays in use should work fine (version 7.0 and newer).  If you
encounter problems, check
@ifset rawfile
the @file{PROBLEMS} file.
@end ifset
@ifclear rawfile
@ref{Problems with Ghostscript}.
@end ifclear

@item The @code{texinfo} package

This is needed for rebuilding the documentation in the @acronym{CVS}
version or if you touched any source file.  At least @w{version 4.0} is
required.
@end itemize

For some known issues with various software, see 
@ifset rawfile
the @file{PROBLEMS} file.
@end ifset
@ifclear rawfile
@ref{Known problems}.
@end ifclear

@node Configure
@section Configure
@ifset embedded
  The configuration is already described for @AUCTeX{}, so we'll just
  mention additionally available options to @command{configure}:
@end ifset
@ifclear embedded
The first step is to configure the source code, telling it where
various files will be.  To do so, run

@example
./configure @var{options}
@end example

(Note: if you have fetched @previewlatex{} from @acronym{CVS} rather
than a regular release, you will have to first generate
@command{./configure} by running @code{autogen.sh} in the @file{preview}
directory.)

On many machines, you will not need to specify any options, but if
@code{configure} cannot determine something on its own, you'll need to
help it out with one of these options:
@end ifclear

@table @code
@ifclear embedded
@item --prefix=@file{/usr/local}
All automatic placements for package components will be chosen from
sensible existing hierarchies below this.  Only if no workable
placement can be found there, in some cases an alternative search will
be made in a prefix deduced from a suitable binary.

@file{/usr/local} is the default @var{prefix}, intended to be suitable
for a site-wide installation.  If you are packaging this as an
operating system component for distribution, the setting @file{/usr}
will probably be the right choice.  If you are planning to install the
package as a single non-priviledged user, you will typically set
@var{prefix} to your home directory.

@item --with-emacs[=@var{/path/to/emacs}]
If you are using a pretest which isn't in your @code{$PATH}, or
@code{configure} is not finding the right Emacs executable, you can
specify it with this option.

@item --with-xemacs[=@var{/path/to/xemacs}]
Configure for generation under XEmacs (Emacs is the default).  Again,
the name of the right XEmacs executable can be specified, complete with
path if necessary.

@item --with-packagedir=@var{/dir}
This XEmacs-only option configures the directory for XEmacs packages.  A
typical user-local setting would be @file{~/.xemacs/xemacs-packages}.
If this directory exists and is below @var{prefix}, it should be
detected automatically.  This will install and activate the package.
Emacs uses a different installation scheme:

@item --with-lispdir=@var{/dir}
This Emacs-only option specifies the location of the @file{site-lisp}
directory within @samp{load-path} under which the files will get
installed (the bulk will get installed in a subdirectory).
@file{./configure} should figure this out by itself.

@item --with-packagelispdir=@file{preview}
This is the directory where the bulk of the package gets located.  The
startfile adds this into @var{load-path}.

@item --with-tex-site=@var{/dir}
If @AUCTeX{} is installed in a non-standard location, use this option to
specify the location of its @file{tex-site.el} file so that it can be
found during compilation.
@end ifclear

@item --with-preview-startfile=@file{preview-latex.el}
This is the name of the startup file.  If @var{lispdir} contains a
subdirectory @file{site-start.d}, @var{startfile} defaults to
@file{site-start.d/preview-latex.el}, and @file{site-start.el} should
load it automatically.  Please be aware that you must not move the
@var{startfile} after installation since other files are found
@emph{relative} to it.

@item --with-texmf-dir=@var{/dir}@*--without-texmf-dir
@cindex preview-install-styles
This option is used for specifying a @acronym{TDS}-compliant directory
hierarchy.  Using @code{--with-texmf-dir=@var{/dir}} you can specify
where the @TeX{} @acronym{TDS} directory hierarchy resides, and the
@TeX{} files will get installed in
@file{@var{/dir}/tex/latex/preview/}.

If you use the @code{--without-texmf-dir} option, the @TeX{}-related
files will be kept in the Emacs Lisp tree, and at runtime the
@env{TEXINPUTS} environment variable will be made to point there.  You
can install those files into your own @TeX{} tree at some later time
with @kbd{@key{M-x} preview-install-styles @key{RET}}.

@item --with-tex-dir=@var{/dir}
If you want to specify an exact directory for the preview @TeX{} files,
use @code{--with-tex-dir=@var{/dir}}. In this case, the files will be
placed in @file{@var{/dir}}, and you'll also need the following option:

@item --with-doc-dir=@var{/dir}
This option may be used to specify where the @TeX{} documentation goes.
It is to be used when you are using @code{--with-tex-dir=@var{/dir}},
but is normally not necessary otherwise.

@ifset embedded
@item --help=recursive
@end ifset
@ifclear embedded
@item --help
@end ifclear
This is not an option specific to @previewlatex{}. A number of standard
options to @file{configure} exist, and we do not have the room to
describe them here; a short description of each is available by using
this option.

@end table

@node Build/install
@section Build/install

@ifset embedded
There is nothing specific to @previewlatex{} you have to do here when
installing @AUCTeX{}.
@end ifset
@ifclear embedded
Once @file{configure} has been run, simply enter

@example
make
@end example
@noindent 
at the prompt to byte-compile the lisp files, extract the @TeX{} files
and build the documentation files.  To install the files into the
locations chosen earlier, type

@example
make install
@end example

@noindent 
You may need special privileges to install, e.g., if you are installing
into system directories. 
@end ifclear

@node Loading the package
@section Loading the package

First you should make sure that @AUCTeX{} gets loaded.  You then need to
place a few lines in your personal @file{.emacs} file (or a site-wide
configuration file).

For XEmacs, if you specified a valid package directory during
installation, or none at all, then XEmacs installation should do
everything necessary in order to install @previewlatex{} as a package
and activate it.  Restarting XEmacs should then make the package
visible, and @kbd{C-c C-p C-d} should produce previews.

If you used @code{--with-packagedir}, you have to make sure that the
directory
@ifset embedded
@file{lisp/auctex}
@end ifset
@ifclear embedded
@file{lisp/preview}
@end ifclear
under the directory you specified is in XEmacs' @code{load-path}
variable.  The package system should normally cater for that.

With Emacs (or if you explicitly disabled use of the package system),
the file @file{preview-latex.el} (which is generated during the
installation) may already be in a directory of the @file{site-start.d/}
variety if your Emacs installation provides it.  In that case it should
be automatically loaded on startup and nothing else needs to be done.
If not, it should at least have been placed somewhere in your
@code{load-path}.  You can then load it with

@example
(load "preview-latex.el" nil t t)
@end example

That is all.  There are other ways of achieving the equivalent thing,
but we don't mention them here any more since they are not better, and
people got confused into trying everything at once.

When you first load a @LaTeX{} file, @file{preview.el} itself gets
loaded (if you have @AUCTeX{} up and working).  @kbd{C-c C-p C-d} should
then give you a graphics preview.  You can customize the default option
set and other settings of the Emacs package by entering @kbd{M-x
customize-group @key{RET} preview @key{RET}}.

There is a sample file @file{circ.tex} which you can use for testing
around a bit, and which serves as sort of a reference for initial bug
reports.  See
@ifset rawfile
the @file{PROBLEMS} file
@end ifset
@ifclear rawfile
@ref{Known problems}
@end ifclear
for a list of known problems.

@node Advice for package providers
@section Providing @previewlatex{} as a package

The use of packages should in general not impact performance negatively
if a user chooses not to employ it, but should be as convenient as
possible.

@previewlatex{} does not affect operation of @AUCTeX{} apart from using
a menu and keybindings unless you exercise its features.  The
recommended invocation (see above), also provided in the autogenerated
file @file{preview-latex.el}, will delay loading and activating
@previewlatex{} until the first @LaTeX{} file gets loaded.  For this
reason, should a user decide that he does not want to get
@previewlatex{} loaded and activated, placing the line

@lisp
(remove-hook 'LaTeX-mode-hook 'LaTeX-preview-setup)
@end lisp

@noindent
in his personal configuration file will be completely sufficient to keep
his personal setup free from any impact of @previewlatex{}'s presence.

For this reason we recommend automatically activating the package.  For
Emacs, this is achieved by installing @file{preview-latex.el} in a
@file{site-start.d} directory (if provided by your installation) like
mentioned above, or by explicitly loading it from your
@file{site-start.el} file.  For the XEmacs package system, the default
@previewlatex{} installation will do something equivalent.

@ifclear embedded
For @acronym{RPM} files we include a @file{preview-latex.spec} file in
the tarball distribution, suitable for recent RedHat systems, that
should do just that.
@end ifclear

If your package is intended as an XEmacs package or to accompany a
precompiled version of Emacs, you might not know which @TeX{} system
will be available when @previewlatex{} gets used.  In this case you
should build using the @code{--without-texmf-dir} option described
previously.  This can also be convenient for systems that are intended
to support more than a single TeX distribution.  Since more often than
not @TeX{} packages for operating system distributions are either much
more outdated or much less complete than separately provided systems
like @TeX{}live, this method may be generally preferred as the more
flexible one.

@node Advice for non-privileged users
@section Installation for non-privileged users

@ifclear embedded
Often people without system administration privileges want to install
software for their private use.  In that case you need to specify more
options top the @file{configure} script.  For XEmacs users, this is
fairly easy, because the XEmacs package system has been designed to make
this sort of thing practical: but GNU Emacs users (and XEmacs users for
whom the package system is for some reason misbehaving) may need to do a
little more work.

The main expedient is using the @option{--prefix} option to the
@file{configure} script, and let it point to the personal home
directory.  In that way, resulting binaries will be installed under the
@file{bin} subdirectory of your home directory, manual pages under
@file{man} and so on.  It is reasonably easy to maintain a bunch of
personal software, since the prefix argument is supported by most
@file{configure} scripts.

You'll have to add something like
@file{/home/myself/share/emacs/site-lisp} to your @code{load-path}
variable, if it isn't there already.

XEmacs users can achieve the same end by pointing @file{configure} at an
appropriate package directory (normally
@option{--with-packagedir=~/.xemacs/xemacs-packages} will serve).  The
package directory stands a good chance at being detected automatically
as long as it is in a subtree of the specified @var{prefix}.

Now here is another thing to ponder: perhaps you want to make it easy
for other users to share parts of your personal Emacs configuration.  In
general, you can do this by writing @samp{~myself/} anywhere where you
specify paths to something installed in your personal subdirectories,
not merely @samp{~/}, since the latter, when used by other users, will
point to non-existent files.

For yourself, it will do to manipulate environment variables in your
@file{.profile} resp.@: @file{.login} files.  But if people will be
copying just Elisp files, their copies will not work.  While it would
in general be preferable if the added components where available from
a shell level, too (like when you call the standalone info reader, or
try using @file{preview.sty} for functionality besides of Emacs
previews), it will be a big help already if things work from inside
of Emacs.

Here is how to do the various parts:

@subheading Making the Elisp available

In XEmacs, you should ask the other users to add symbolic links in their
@file{~/.xemacs/xemacs-packages/lisp},
@file{~/.xemacs/xemacs-packages/info} and
@file{~/.xemacs/xemacs-packages/etc} directories. (Alas, there is
presently no easy programmatic way to do this, except to have a script
do the symlinking for them.)

In GNU Emacs, It should be sufficient if people just do

@lisp
(load "~myself/share/emacs/site-lisp/preview-latex.el" nil t t)
@end lisp

where the path points to your personal installation.  The rest of the
package should be found relative from there without further ado.


@subheading Making the Info files available

While for yourself, you'll probably want to manipulate the
@samp{INFOPATH} variable; for access inside of Elisp something like
the following might be convenient:

@lisp
(eval-after-load 'info
   '(add-to-list 'Info-directory-list "~myself/info"))
@end lisp

In XEmacs, as long as XEmacs can see the package, there should be no
need to do anything at all; the info files should be immediately
visible.  However, you might want to set @samp{INFOPATH} anyway, for the
sake of standalone readers outside of XEmacs. (The info files in XEmacs
are normally in @file{~/.xemacs/xemacs-packages/info}.)
@end ifclear

@subheading Making the @LaTeX{} style available

If you configured the system @samp{--without-texmf-dir}, then it should
just work for other users.

If not: for yourself you want to manipulate the @samp{TEXINPUTS}
environment variable or an appropriate setting of a personal
@samp{texmf.cnf} file.  It may well be that your site configuration
already caters for a personal user's @file{texmf} tree, in which case
having specified the appropriate tree to @command{./configure} will have
set up everything for yourself.  If that personal tree is not located at
the equivalent of @file{~myself/share/texmf}, it is a good idea to make
this so with the help of a symbolic link, so that the usual
@samp{--prefix} invocation to @command{./configure} is everything that
is needed.

For others, you want to add something like

@lisp
(setenv "TEXINPUTS"
        (concat "~myself/share/texmf/tex/latex/preview:"
                (getenv "TEXINPUTS")))

(setenv "TEXDOCS"
        (concat "~myself/share/texmf/doc/latex/styles:"
                (getenv "TEXDOCS")))
@end lisp

This just exports the relevant directories for @previewlatex{}; you
might have more to share.  Also, the @samp{TEXDOCS} change is hardly
likely to be effective: most people call @file{texdoc} from a shell
window rather than from inside of Emacs, and those that are
interested in the style documentation will usually want to have the
style itself available anyhow without having to call @LaTeX{} from
within Emacs.

But at least for people just interested in @previewlatex{} from inside
of Emacs, the augmentation of @samp{TEXINPUTS} will be helpful.
Although it does not appear like it, under @code{web2c}-based systems
like te@TeX{}, this invocation will also do the right thing in case
@samp{TEXINPUTS} has no previous value.

@ifclear rawfile
@comment  node-name,  next,  previous,  up
@node Installation under MS Windows
@section Installation under MS Windows
@include wininstall.texi
@end ifclear
