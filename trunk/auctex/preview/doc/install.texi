@include macros.texi
@ifset rawfile
@chapter Installing @previewlatex{}

@end ifset
@c -----------------------
Installing @previewlatex{} should be simple: merely @command{./configure},
@command{make}, and @code{make install}.  This does not yet activate the
package, but merely makes it available.  See @ref{Loading the package}
for the activation.  Note that unlike most emacs add-ins,
@previewlatex{} consists of a @TeX{} part and an Emacs part (that uses
@AUCTeX{}).  This makes configuration a bit trickier than normal.
Please read through this document fully before installing anything.

@ifclear rawfile
@menu
* Prerequisites::               
* Configure::                   
* Build/install::               
* Loading the package::         
* Advice for package providers::  
* Advice for non-privileged users::  
* Installation under MS Windows::  
@end menu
@end ifclear

@node Prerequisites
@section Prerequisites

@itemize @bullet
@item A recent version of Emacs 21, alternatively XEmacs

The first version known to work with @previewlatex{} is Emacs-21.1.
Since @previewlatex{} heavily exercises new features of Emacs 21,
getting the newest release is a good idea.
 
While image support for Emacs under Microsoft Windows has not been
implemented as of @w{version 21.3}, it is under development and can be
accessed by anonymous @acronym{CVS} at
@uref{http://savannah.gnu.org/projects/emacs}; please help in testing it
before @w{Emacs 21.4} gets released.

There is additional information for Windows installations in
@ifset rawfile
the file @file{INSTALL.windows}.
@end ifset
@ifclear rawfile
@xref{Installation under MS Windows}.
@end ifclear

For XEmacs, at least version 21.4.9 is recommended.  Earlier versions
might be made to work with less than optimal results.

@item A working @AUCTeX{} installation

@AUCTeX{} can be found at @uref{http://www.gnu.org/software/auctex}.
This site now provides up-to-date beta and stable versions as well as
RPMs.  At the time of this writing, the latest version is 11.14 which is
necessary for multi-directory documents.  Apply the patch in
@file{patches/auctex-11.13.patch} for 11.13 or earlier in case you are
hit by this bug.  Apply the patch in @file{patches/auctex-10.patch} for
versions before 11.0 if you really must, but complain to whoever stuck
you with them.

@item A working @LaTeX{} installation

Preview should work with nearly any @LaTeX{} installation which contains
dvips, though most testing has taken place using te@TeX{}-based
distributions.

@item A recent GhostScript

This is not really needed to @emph{install} the package, but will be
required for stable operation of it.  Most problems we have encountered
come from interaction with not so recent versions of GhostScript, so it
is a good idea to have, say GhostScript 6.51 or later installed.
@previewlatex{} should in its current version work with most versions
after that.  If you encounter problems, check
@ifset rawfile
the @file{PROBLEMS} file.
@end ifset
@ifclear rawfile
@ref{Problems with GhostScript}.
@end ifclear

@item The @code{texinfo} package

This is needed for building the documentation.  At least @w{version 4.0}
is required.  If you don't have this, you may download a separate tar
file with the prebuilt documentation from Sourceforge and install it
over the main unpacked tar archive.
@end itemize

For some known issues with various software, see 
@ifset rawfile
the @file{PROBLEMS} file.
@end ifset
@ifclear rawfile
@ref{Known problems}.
@end ifclear

@node Configure
@section Configure

The first step is to configure the source code, telling it where
various files will be.  To do so, run

@example
./configure @var{options}
@end example

(Note: if you have fetched @previewlatex{} from @acronym{CVS} rather than
a regular release, you will have to first generate @command{./configure} by
running @code{autogen.sh} in the @file{preview} directory.)

On many machines, you will not need to specify any options, but if
@code{configure} cannot determine something on its own, you'll need to
help it out with one of these options:

@table @code
@item --with-emacs[=@var{/path/to/emacs}]
If you are using a pretest which isn't in your @code{$PATH}, or
@code{configure} is not finding the right Emacs executable, you can
specify it with this option.

@item --with-xemacs[=@var{/path/to/xemacs}]
Configure for generation under XEmacs (Emacs is the default).  Again,
the name of the right XEmacs executable can be specified, complete with
path if necessary.

@item --with-lispdir=@var{/dir}
This tells where to install Emacs Lisp files.  Normally, this option is
unnecessary, but may be used if you don't like the directory that
configure is suggesting.

@item --with-packagedir=@var{/dir}
This tells where to install the XEmacs Package.  Again, this option is
normally unnecessary, but may be used if you don't like the directory
that configure is suggesting, and you know that XEmacs regards the
directory you specify as a package directory.

If you are installing @previewlatex{} for a single user, and you have
installed no XEmacs packages as that user before, then @code{configure}
may try to install @previewlatex{} in the systemwide package directory
(that it cannot write to), causing installation to fail.  In that case,
a good value for this option is @file{~/.xemacs/xemacs-packages}, as
XEmacs looks there for per-user packages by default.

@item --with-tex-site=@var{/dir}
If @AUCTeX{} is installed in a non-standard location, use this option
to specify the location of its @file{tex-site.el} file.

@item --with-texmf-dir=@var{/dir}@*--with-tex-dir=@var{/dir}
Both of these options can be used to specify the location to install the
preview @TeX{} files.  They are not necessary for most @TeX{} installs,
but may be used if you don't like the directory that configure is
suggesting.  Using @code{--with-texmf-dir=@var{/dir}} you can specify
where the @TeX{} @acronym{TDS} directory hierarchy resides, and the
@TeX{} files will be installed in @code{@var{/dir}/tex/latex/preview}.
If you want to specify an exact directory for the preview @TeX{} files,
use @code{--with-tex-dir=@var{/dir}}. In this case, the files will be
placed in @file{@var{/dir}}.

@item --with-doc-dir=@var{/dir}
This option may be used to specify where the @TeX{} documentation goes.
It is to be used when you are using @code{--with-tex-dir=@var{/dir}},
but is normally not necessary otherwise.

@item --help
This is not an option specific to @previewlatex{}. A number of standard
options to @file{configure} exist, and we do not have the room to
describe them here; a short description of each is available, using
@code{--help}.

@end table

@node Build/install
@section Build/install

Once @file{configure} has been run, simply enter

@example
make
@end example
@noindent 
at the prompt to byte-compile the lisp files, extract the @TeX{} files
and build the documentation files.  To install the files into the
locations chosen earlier, type

@example
make install
@end example

@noindent 
You may need special privileges to install, e.g., if you are installing
into system directories. 

@node Loading the package
@section Loading the package

First you should make sure that @AUCTeX{} gets loaded.  You then need to
place a few lines in your personal @file{.emacs} file (or a site-wide
configuration file).

For XEmacs, if you specified a valid package directory during
installation, or none at all, then XEmacs installation should do
everything necessary in order to install @previewlatex{} as a package
and activate it.  Restarting XEmacs should then make the package
visible, and @kbd{C-c C-p C-d} should produce previews.

If you used @code{--with-packagedir}, you have to make sure that the
directory @file{lisp/preview} under the directory you specified is in
XEmacs' @code{load-path} variable.

For GNU Emacs, the recommended way to activate @previewlatex{} is to
copy the file @file{preview-latex.el} (which is generated during the
installation) to a place where your installation keeps automatically
loaded startup files.  Alternatively, you can copy it to some place on
your @code{load-path} and load it with

@example
(load "preview-latex.el" nil t t)
@end example

That is all.  There are other ways of achieving the equivalent thing,
but we don't mention them here any more since they are not better, and
people got confused into trying everything at once.

@file{preview-latex.el} itself is rather short, and loaded quite fast.
When you first load a @LaTeX{} file, @file{preview.el} itself gets
loaded (if you have @AUCTeX{} up and working).  @kbd{C-c C-p C-d} should
then give you a graphics preview.  You can customize the default option
set and other settings of the Emacs package by entering @kbd{M-x
customize-group @key{RET} preview @key{RET}}.

There is a sample file @file{circ.tex} which you can use for testing
around a bit, and which serves as sort of a reference for initial bug
reports.  See
@ifset rawfile
the @file{PROBLEMS} file
@end ifset
@ifclear rawfile
@ref{Known problems}
@end ifclear
for a list of known problems.

@node Advice for package providers
@section Providing @previewlatex{} as a package

As a package provider, you should make sure that your users will be
served best according to their intentions, and keep in mind that a
system might be used by more than one user, with different preferences.
The use of packages should in general not impact performance negatively
if a user chooses not to employ it, but should be as convenient as
possible. For example, the policy with regard to @AUCTeX{} typically has
been to @emph{refrain} from activating it automatically when it is
installed as a package.  This is reasonable because

@itemize @bullet
@item Emacs comes with a simpler default @TeX{} mode with different
keybindings.  Some users might prefer that.
@item @AUCTeX{} is activated via @code{(require 'tex-site)}.  Once this
has happened, it is not possible to get back the original @TeX{} mode.
A site-wide default would for this reason be hard to override.
@end itemize

In contrast, @previewlatex{} does not affect operation of @AUCTeX{}
unless you exercise its features.  The recommended invocation (see
above), also provided in the autogenerated file @file{preview-latex.el},
will delay loading and activating @previewlatex{} until the first
@LaTeX{} file gets loaded.  For this reason, should a user decide that
he does not want to get @previewlatex{} loaded and activated, placing
the line

@lisp
(remove-hook 'LaTeX-mode-hook 'LaTeX-preview-setup)
@end lisp

@noindent
in his personal configuration file will be completely sufficient to keep
his personal setup free from any impact of @previewlatex{}'s presence.

For this reason we recommend installing the invocation provided in the
file @file{preview-latex.el} at a place where it gets executed during
the site startup phase of Emacs.  This will result in a default behavior
of loading @previewlatex{} whenever @AUCTeX{} gets loaded.

XEmacs uses a package system.  The default @previewlatex{} installation
should cater for everything necessary in that case.

For @acronym{RPM} files we include a @file{preview-latex.spec} file in
the tarball distribution, suitable for recent RedHat systems, that
should do just that.

@node Advice for non-privileged users
@section Installation for non-privileged users

Often people without system administration privileges want to install
software for their private use.  In that case you need to specify more
options top the @file{configure} script.  For XEmacs users, this is
fairly easy, because the XEmacs package system has been designed to make
this sort of thing practical: but GNU Emacs users (and XEmacs users for
whom the package system is for some reason misbehaving) may need to do a
little more work.

GNU Emacs users can solve this problem by using the @option{--prefix}
option to the @file{configure} script, and let it point to the personal
home directory.  In that way, resulting binaries will be installed under
the @file{bin} subdirectory of your home directory, manual pages under
@file{man} and so on.  That way, it is reasonably easy to maintain a
bunch of additional packages, since the prefix argument is supported by
most @file{configure} scripts.

You'll have to add something like
@file{/home/myself/share/emacs/site-lisp} to your @code{load-path}
variable, if it isn't there already.

XEmacs users can achieve the same end by pointing @file{configure} at an
appropriate package directory (normally
@option{--with-packagedir=~/.xemacs/xemacs-packages} will serve).  This
should only need to be done once, and should be needed fairly rarely; if
you have installed any personal XEmacs packages before, @file{configure}
should detect that, and automatically install @previewlatex{} there too;
equally, if you have installed @previewlatex{} somewhere searched by
XEmacs, @previewlatex{} should be automatically reinstalled over that
copy.

(@file{configure} may guess wrong if the site administrator has
installed @previewlatex{} somewhere else: if so, just use the
@option{--with-packagedir} option to override @file{configure}'s
choice.)

But there is another problem: perhaps you want to make it easy for other
users to share parts of your personal Emacs configuration.  In general,
you can do this by writing @samp{~myself/} anywhere where you specify
paths to something installed in your personal subdirectories, not merely
@samp{~/}, since the latter, when used by other users, will point to
non-existent files.

For yourself, it will do to manipulate environment variables in your
@file{.profile} resp.@: @file{.login} files.  But if people will be
copying just Elisp files, their copies will not work.  While it would
in general be preferable if the added components where available from
a shell level, too (like when you call the standalone info reader, or
try using @file{preview.sty} for functionality besides of Emacs
previews), it will be a big help already if things work from inside
of Emacs.

Here is how to do the various parts:

@subheading Making the Elisp available

In XEmacs, you should ask the other users to add symbolic links in their
@file{~/.xemacs/xemacs-packages/lisp},
@file{~/.xemacs/xemacs-packages/info} and
@file{~/.xemacs/xemacs-packages/etc} directories. (Alas, there is
presently no easy programmatic way to do this, except to have a script
do the symlinking for them.)

In GNU Emacs, you'll want the invocation lines from the autogenerated
file @file{preview-latex.el}.  In addition, you'll want a line such as

@lisp
(add-to-list 'load-path "~myself/share/emacs/site-lisp/preview")
@end lisp

@subheading Making the Info files available

While for yourself, you'll probably want to manipulate the
@samp{INFOPATH} variable; for access inside of Elisp something like
the following might be convenient:

@lisp
(eval-after-load 'info
   '(add-to-list 'Info-directory-list "~myself/info"))
@end lisp

In XEmacs, as long as XEmacs can see the package, there should be no
need to do anything at all; the info files should be immediately
visible.  However, you might want to set @samp{INFOPATH} anyway, for the
sake of standalone readers outside of XEmacs. (The info files in XEmacs
are normally in @file{~/.xemacs/xemacs-packages/info}.)

@subheading Making the LaTeX style available

Again, for yourself you want to manipulate the @samp{TEXINPUTS}
environment variable or an appropriate setting of a personal
@samp{texmf.cnf} file.  It may well be that your site configuration
already installs access to a personal user's @file{texmf} tree, in
which case having specified the appropriate tree to
@command{./configure} will have set up everything for yourself.
If that personal tree is not located at the equivalent of
@file{~myself/share/texmf}, it is a good idea to make this so with
the help of a symbolic link, so that the usual @samp{--prefix}
invocation to @command{./configure} is everything that is needed.

For others, you want to add something like

@lisp
(setenv "TEXINPUTS"
        (concat "~myself/share/texmf/tex/latex/preview:"
                (getenv "TEXINPUTS")))

(setenv "TEXDOCS"
        (concat "~myself/share/texmf/doc/latex/styles:"
                (getenv "TEXDOCS")))
@end lisp

This just exports the relevant directories for @previewlatex{}; you
might have more to share.  Also, the @samp{TEXDOCS} change is hardly
likely to be effective: most people call @file{texdoc} from a shell
window rather than from inside of Emacs, and those that are
interested in the style documentation will usually want to have the
style itself available anyhow without having to call @LaTeX{} from
within Emacs.

But at least for people just interested in @previewlatex{} from inside
of Emacs, the augmentation of @samp{TEXINPUTS} will be helpful.
Although it does not appear like it, under @code{web2c}-based systems
like te@TeX{}, this invocation will also do the right thing in case
@samp{TEXINPUTS} has no previous value.

@ifclear rawfile
@node Installation under MS Windows
@comment  node-name,  next,  previous,  up
@section Installation under MS Windows
@include wininstall.texi
@end ifclear
