@include macros.texi

Installation of @AUCTeX{} is a bit more complicated, but we are working
to resolve the issues involved. Please report success/failure to us at
@samp{auc-tex@@sunsite.dk}. Here are the steps to perform:
@enumerate
@item
The installation of @AUCTeX{} will require the MSYS tool set from
@uref{http://www.mingw.org}. If you have the Cygwin tool set from
@uref{http://cygwin.com} installed, that should do just fine as well,
but it is quite larger and slower. If you need to compile Emacs/XEmacs
from source, you'll also need compilers and stuff that are also
available for both of those tool sets. Compiling Emacs is outside of the
scope of this manual: good luck. @AUCTeX{} itself does not require a
@w{C compiler} for installation. Without either of those tool sets,
however, you would need to generate your various @file{Makefile} copies
from the respective @file{Makefile.in} files by hand, and that would
mean quite a lot of guesswork. There is no sense going into too much
details here: the instructions would change severely between versions,
and the above tool sets are easy enough to acquire to make manual
configuration unnecessary.

@item
Install GNU Emacs from @uref{http://savannah.gnu.org/projects/emacs/} or
XEmacs from @uref{http://www.xemacs.org}.

@item
You need a working @TeX{} installation.  One popular installation under
Windows is @uref{http://www.miktex.org,Mik@TeX{}}.  Another much more
extensive system is @uref{http://www.tug.org/texlive,@w{@TeX{} live}}
which is rather close to its Unix cousins.

@item
Now the fun stuff starts. Unpack the @AUCTeX{} distribution into some
installation directory. @strong{Do not} unpack it right into your Emacs'
own directories: the installation will copy the material that needs to
be placed there. Keep the installation directory separate: you can
remove its contents after installation completes. Since you are reading
this, you probably have already unpacked @AUCTeX{}, but it should still
be easy to move it elsewhere now.

@item
Ready for takeoff. Start some shell (typically @file{bash}) capable of
running @file{configure}, change into the installation directory and
call @code{./configure} with appropriate options.

Typical options you'll want to specify will be
@table @code
@item --with-emacs
if you are installing Emacs. You can use
@samp{--with-emacs=@var{/path/to/emacs}} to specify the name of the
installed Emacs executable, complete with its path if necessary (if
Emacs is not within a directory specified in your @var{PATH} environment
setting).

@item --with-xemacs
If you are using XEmacs, of course use @samp{--with-xemacs} in the same
manner.

@item --with-texmf-dir=@var{dir}
This will specify the directory where your @TeX{} installation sits. If
your @TeX{} installation does not conform to the TDS (@TeX{} directory
standard), you may need to specify more options to get everything in
place. See
@ifset rawfile
the `Configure' section in the @file{INSTALL} file
@end ifset
@ifclear rawfile
@ref{Configure}
@end ifclear
for more information about the available options.

@item --with-lisp-dir=@var{/dir}
This may be needed for GNU Emacs installation, but hopefully
@file{configure} should figure this out by itself. Don't use this for
XEmacs, rather use

@item --with-package-dir=@var{/dir}
which gives the location of the package directory for XEmacs where stuff
should be installed. Again, hopefully this is not necessary to specify.
@end table

@ignore
Some executables might not be found in your path. That is not a good
idea, but you can get around by specifying environment variables to
@file{configure}:
@example
GS="@var{/path/to/GhostScript}" ./configure @dots{}
@end example
should work for this purpose.
@end ignore

@item
If you need to use the prebuilt documentation (see above), now is the
time to unpack it over the rest of the installation directory.

@item
Run @code{make} in the installation directory (we have had one report
that Emacs did not manage to byte compile the Elisp files, and that had
to be done by hand.  No idea about what might have gone wrong there).
	
@item
Run @code{make install} in the installation directory.

@item
For GNU Emacs, the recommended way to activate @AUCTeX{} is to add the
following line to your @file{.emacs} file:

@example
(require 'tex-site)
@end example

@item
Load a @file{.tex} file Emacs or XEmacs and see if you get the
@samp{Command} menu. Try using that to @LaTeX{} the file.

Well, that about is all.  Have fun!
