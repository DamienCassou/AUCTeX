@include macros.texi
@ifset rawfile
@chapter Installing @previewlatex{}

@end ifset
@c -----------------------
Installing @previewlatex{} should be simple: merely @code{./configure},
@code{make}, and @code{make install}.  Note that unlike most emacs
add-ins, @previewlatex{} consists of a @TeX{} part and an Emacs part (that
uses @AUCTeX{}).  This makes configuration a bit trickier than normal.
Please read through this document fully before installing anything.

@ifclear rawfile
@menu
* Prerequisites::               
* Configure::                   
* Build/install::               
* Loading the package::         
* Advice for package providers::  
* Advice for non-privileged users::
@end menu
@end ifclear

@node Prerequisites
@section Prerequisites

@itemize @bullet
@item A recent version of Emacs 21, alternatively XEmacs

The first version without known quirks and bugs affecting @previewlatex{}
is Emacs-21.1.  Only very recent pretest versions before that have slight
chances of working at all.  Since @previewlatex{} heavily exercises new
features of Emacs 21, getting the newest release is a good idea.
 
While image support for Emacs under Microsoft Windows has not been
implemented as of @w{version 21.2}, it is under development and can be
accessed by anonymous @acronym{CVS} at
@uref{http://savannah.gnu.org/projects/emacs}; please help in testing it
before @w{Emacs 21.3} gets released.

Another option is to try XEmacs, for which we now have support
available.  @strong{Please note:} Presently, the port to XEmacs is work
in progress.  Don't expect too much, and be prepared to contact the
developers.  Problems with the XEmacs port are described in @ref{Known
problems}.

@item A working @AUCTeX{} installation

@AUCTeX{} can be found at
@uref{http://mirrors.sunsite.dk/auctex/www/auctex/}.  All fairly recent
versions should work.  Since at the time of this writing, the latest
released version is 10.0g (with known issues), you should rather get
version 11.0 or later, which at the time of this writing is an
alpha-test version.  A suitable version is also available from the
download section of @previewlatex{}'s home page
@ifset rawfile
(see the @file{README} file).
@end ifset
@ifclear rawfile
(@pxref{Availability}).
@end ifclear 
If this option is not available to you, try the patch described in the
@file{PROBLEMS} file or @ref{Known problems}).

@item A working @LaTeX{} installation

Preview should work with nearly any @LaTeX{} installation which contains
dvips, though most testing has taken place using te@TeX{}-based
distributions.

@item A recent GhostScript

This is not really needed to @emph{install} the package, but will be
required for stable operation of it.  Most problems we have encountered
come from interaction with not so recent versions of GhostScript, so it
is a good idea to have, say GhostScript 6.51 or later installed.

@item The @code{texinfo} package

This is needed for building the documentation.  At least @w{version 4.0}
is required.  If you don't have this, you may download a separate tar
file with the prebuilt documentation from Sourceforge and install it
over the main unpacked tar archive.
@end itemize

For some known issues with various software, see 
@ifset rawfile
the @file{PROBLEMS} file.
@end ifset
@ifclear rawfile
@ref{Known problems}.
@end ifclear

@node Configure
@section Configure

The first step is to configure the source code, telling it where
various files will be.  To do so, run

@example
./configure @var{options}
@end example

(Note: if you have fetched @previewlatex{} from @acronym{CVS} rather than
a regular release, you will have to first generate @file{./configure} by
running @code{autogen.sh} in the preview directory.)

On many machines, you will not need to specify any options, but if
configure cannot determine something on its own, you'll need to help
it out with one of these options

@table @code
@item --with-emacs[=@var{/path/to/emacs}]
If you are using a pretest which isn't in your @code{$PATH}, or
@code{configure} is not finding the right emacs binary, you can specify
it with this option.

@item --with-xemacs[=@var{/path/to/xemacs}]
Configure for generation under xemacs. Again, the path to the right
xemacs binary can be specified with this option.

@item --with-lispdir=@var{/dir}
This tells where to install Emacs Lisp files.  Normally, this option is
unnecessary, but may be used if you don't like the directory that
configure is suggesting.

@item --with-packagedir=@var{/dir}
This tells where to install the XEmacs Package.  Again, this option is
normally unnecessary, but may be used if you don't like the directory
that configure is suggesting, and you know that XEmacs regards the
directory you specify as a package directory.

If you are installing @previewlatex{} for a single user, and you have
installed no XEmacs packages as that user before, then configure may try
to install @previewlatex{} in the systemwide package directory (that it
cannot write to), causing installation to fail.  In that case, a good
value for this option is @file{~/.xemacs/xemacs-packages}, as XEmacs
looks there for per-user packages by default.

@item --with-tex-site=@var{/dir}
If @AUCTeX{} is installed in a non-standard location, use this option
to specify the location of its @file{tex-site.el} file.

@item --with-texmf-dir=@var{/dir}@*--with-tex-dir=@var{/dir}
Both of these options can be used to specify the location to install the
preview @TeX{} files.  They are not necessary for most @TeX{} installs,
but may be used if you don't like the directory that configure is
suggesting.  Using @code{--with-texmf-dir=@var{/dir}} you can specify
where the @TeX{} @acronym{TDS} directory hierarchy resides, and the
@TeX{} files will be installed in @code{@var{/dir}/tex/latex/preview}.
If you want to specify an exact directory for the preview @TeX{} files,
use @code{--with-tex-dir=@var{/dir}}. In this case, the files will be
placed in @file{@var{/dir}}.

@item --with-doc-dir=@var{/dir}
This option may be used to specify where the @TeX{} documentation goes.
It is normally not necessary, but can be useful if you are using
@code{--with-tex-dir=@var{/dir}}.

@item --disable-8bit-test
There can be problems if your @LaTeX{} implementation is not 8-bit
clean.  This switch disables the 8-bit test, in case you know that your
installation is clean and the test is simply failing.  By specifying
this switch, you signal your acceptance of having @previewlatex{} fail
on @LaTeX{} files containing 8-bit characters.  Check
@ifset rawfile
the `LaTeX international characters' section in the @file{PROBLEMS} file
@end ifset
@ifclear rawfile
@ref{LaTeX international characters}
@end ifclear
for more details.

Failure of this test can also happen if you have fetched @previewlatex{}
via @acronym{CVS} and have run @code{autoconf} by hand instead of using
the provided @file{autogen.sh}: @code{autoconf} unfortunately clobbers
the language environment settings, and there is no way portable across
versions to preserve them.  The current version of the @file{autogen.sh}
script tries to work around this deficiency.

@end table

@node Build/install
@section Build/install

Once @file{configure} has been run, simply enter

@example
make
@end example
@noindent 
at the prompt to byte-compile the lisp files, extract the @TeX{} files
and build the documentation files.  To install the files into the
locations chosen earlier, type

@example
make install
@end example

@noindent 
You may need special privileges to install, e.g., if you are installing
into system directories. 

@node Loading the package
@section Loading the package

You need to place a few lines in your personal @file{.emacs} file (or
a site-wide configuration file). Also, please remember to load
@AUCTeX{}.

Under Emacs, if you used the option @code{--with-lispdir}, you have to
make sure that the directory where you installed the lisp files of
@previewlatex{} is in Emacs' @code{load-path} variable.  This could
mean, for example, adding the line @code{(add-to-list 'load-path
"~/elisp/preview")} to your @file{.emacs} file.

@cindex @file{.emacs} 
Next put the following lines into your @file{.emacs} file:

@example
(autoload 'LaTeX-preview-setup "preview")
(add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
@end example

This will make Emacs load @file{preview.el} and let it install itself
into @AUCTeX{} when you first load a @LaTeX{} file (be sure to have
@AUCTeX{} up and working).  @kbd{C-c C-c g @key{RET}} should then give
you a graphics preview.  You can customize the default option set and
other settings of the Emacs package by entering @kbd{M-x customize-group
@key{RET} preview @key{RET}}.

Under XEmacs, if you specified a valid package directory, or none at
all, then restarting XEmacs should be enough to make the package
visible, and @kbd{C-c C-c g @key{RET}} should produce previews as they
do for Emacs.

If you used @code{--with-packagedir}, you have to make sure that the
directory @file{lisp/preview} under the directory you specified is in
XEmacs's @code{load-path} variable.

There is a sample file @file{circ.tex} which you can use for testing
around a bit, and which serves as sort of a reference for initial bug
reports.  See
@ifset rawfile
the @file{PROBLEMS} file
@end ifset
@ifclear rawfile
@ref{Known problems}
@end ifclear
for a list of known problems.

@node Advice for package providers
@section Providing @previewlatex{} as a package

As a package provider, you should make sure that your users will be
served best according to their intentions, and keep in mind that a
system might be used by more than one user, with different preferences.

Use of packages should in general not impact performance negatively if a
user chooses not to employ it, but should be as convenient as possible.

The policy with regard to @AUCTeX{} typically has been @emph{not} to
activate it automatically when it is installed as a package.  This is
reasonable because

@itemize @bullet
@item Emacs comes with a simpler default @TeX{} mode with different
keybindings.  Some users might prefer that.
@item @AUCTeX{} is activated via @code{(require 'tex-site)}.  Once this
has happened, it is not possible to get back the original @TeX{} mode.
A site-wide default would for this reason be hard to override.
@end itemize

In contrast, @previewlatex{} does not affect operation of @AUCTeX{}
unless you exercise its features.  The recommended invocation (see
above) that is also provided in the autogenerated file
@file{preview-latex.el} will, once you have added @previewlatex{}'s
Lisp code to your @code{load-path} variable, delay loading and
activating @previewlatex{} until the first @LaTeX{} file gets loaded.
For this reason, should a user decide that he does not want to get
@previewlatex{} loaded and activated, placing the line

@lisp
(remove-hook 'LaTeX-mode-hook 'LaTeX-preview-setup)
@end lisp

@noindent
in his personal configuration file will be completely sufficient for
keeping his personal setup free from any impact of @previewlatex{}'s
presence.

For this reason we recommend installing the invocation provided in the
file @file{preview-latex.el} at a place where it gets executed during
the site startup phase of Emacs.  As long as @previewlatex{}'s Lisp
files are installed to a place in Emacs' @code{load-path} variable, this
should be sufficient.  It will result in a default behavior of loading
@previewlatex{} whenever @AUCTeX{} gets loaded.

XEmacs uses a package system.  @previewlatex{} should cater for
everything necessary in that case.

For @acronym{RPM} files we include a @file{preview-latex.spec} file in
the tarball distribution that should do just that.

@node Advice for non-privileged users
@section Installation for non-privileged users

Often people without system administration privileges want to install
software for their private use.  In that case you need to specify more
options top the @file{configure} script.  For XEmacs users, this is
fairly easy, because the XEmacs package system has been designed to make
this sort of thing practical: but GNU Emacs users (and XEmacs users for
whom the package system is for some reason misbehaving) may need to do a
little more work.

GNU Emacs users can solve this problem by using the @option{--prefix}
option to the @file{configure} script, and let it point to the personal
home directory.  In that way, resulting binaries will be installed under
the @file{bin} subdirectory of your home directory, manual pages under
@file{man} and so on.  That way, it is reasonably easy to maintain a
bunch of additional packages, since the prefix argument is supported by
most @file{configure} scripts.

You'll have to add something like
@file{/home/myself/share/emacs/site-lisp} to your @code{load-path}
variable, if it isn't there already.

XEmacs users can achieve the same end by pointing @file{configure} at an
appropriate package directory (normally
@option{--with-packagedir=~/.xemacs/xemacs-packages} will serve).  This
should only need to be done once, and should be needed fairly rarely; if
you have installed any personal XEmacs packages before, @file{configure}
should detect that, and automatically install @previewlatex{} there too;
equally, if you have installed @previewlatex{} somewhere searched by
XEmacs, @previewlatex{} should be automatically reinstalled over that
copy.

(@file{configure} may guess wrong if the site administrator has
installed @previewlatex{} somewhere else: if so, just use the
@option{--with-packagedir} option to override @file{configure}'s
choice.)

But there is another problem: perhaps you want to make it easy for other
users to share parts of your personal Emacs configuration.  In general,
you can do this by writing @samp{~myself/} anywhere where you specify
paths to something installed in your personal subdirectories, not merely
@samp{~/}, since the latter, when used by other users, will point to
non-existent files.

For yourself, it will do to manipulate environment variables in your
@file{.profile} resp.@: @file{.login} files.  But if people will be
copying just Elisp files, their copies will not work.  While it would
in general be preferable if the added components where available from
a shell level, too (like when you call the standalone info reader, or
try using @file{preview.sty} for functionality besides of Emacs
previews), it will be a big help already if things work from inside
of Emacs.

Here is how to do the various parts:

@subheading Making the Elisp available

In XEmacs, you should ask the other users to add symbolic links in their
@file{~/.xemacs/xemacs-packages/lisp},
@file{~/.xemacs/xemacs-packages/info} and
@file{~/.xemacs/xemacs-packages/etc} directories. (Alas, there is
presently no easy programmatic way to do this, except to have a script
do the symlinking for them.)

In GNU Emacs, you'll want the invocation lines from the autogenerated
file @file{preview-latex.el}.  In addition, you'll want a line such as

@lisp
(add-hook 'load-path "~myself/share/emacs/site-lisp/preview")
@end lisp

@subheading Making the Info files available

While for yourself, you'll probably want to manipulate the
@samp{INFOPATH} variable; for access inside of Elisp something like
the following might be convenient:

@lisp
(eval-after-load 'info
   '(add-to-list 'Info-directory-list "~myself/info"))
@end lisp

In XEmacs, as long as XEmacs can see the package, there should be no
need to do anything at all; the info files should be immediately
visible.  However, you might want to set @samp{INFOPATH} anyway, for the
sake of standalone readers outside of XEmacs. (The info files in XEmacs
are normally in @file{~/.xemacs/xemacs-packages/info}.)

@subheading Making the LaTeX style available

Again, for yourself you want to manipulate the @samp{TEXINPUTS}
environment variable or an appropriate setting of a personal
@samp{texmf.cnf} file.  It may well be that your site configuration
already installs access to a personal user's @file{texmf} tree, in
which case having specified the appropriate tree to
@file{./configure} will have set up everything for yourself.
If that personal tree is not located at the equivalent of
@file{~myself/share/texmf}, it is a good idea to make this so with
the help of a symbolic link, so that the usual @samp{--prefix}
invocation to @file{./configure} is everything that is needed.

For others, you want to add something like

@lisp
(setenv "TEXINPUTS"
        (concat "~myself/share/texmf/tex/latex/preview:"
                (getenv "TEXINPUTS")))

(setenv "TEXDOCS"
        (concat "~myself/share/texmf/doc/latex/styles:"
                (getenv "TEXDOCS")))
@end lisp

This just exports the relevant directories for @previewlatex{}; you
might have more to share.  Also, the @samp{TEXDOCS} change is hardly
likely to be effective: most people call @file{texdoc} from a shell
window rather than from inside of Emacs, and those that are
interested in the style documentation will usually want to have the
style itself available anyhow without having to call @LaTeX{} from
within Emacs.

But at least for people just interested in @previewlatex{} from inside
of Emacs, the augmentation of @samp{TEXINPUTS} will be helpful.
Although it does not appear like it, under te@TeX{}-based systems,
this invocation will also do the right thing in case @samp{TEXINPUTS}
has no previous value.
